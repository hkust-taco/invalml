
import "./Runtime.mls"
import "./Rendering.mls"

module Predef with ...

fun id(x) = x

fun not(x) = x is false


fun (@) apply(f, ...args) = f(...args)

fun (|>) pipeInto(x, f) = f(x)
fun (<|) pipeFrom(f, x) = f(x)

fun (!>) tap(x, f) = f(x); x
fun (<!) pat(f, x) = f(x); x

fun (>>) andThen(f, g)(x) = g(f(x))
fun (<<) compose(f, g)(x) = f(g(x))

fun (.) passTo(receiver, f)(...args) = f(receiver, ...args)

fun (|>.) call(receiver, f)(...args) = f.call(receiver, ...args)

val pass1 = Rendering.pass1
val pass2 = Rendering.pass2
val pass3 = Rendering.pass3
val passing = Rendering.passing
val map = Rendering.map
val fold = Rendering.fold
val interleave = Rendering.interleave
val render = Rendering.render

fun print(...xs) =
  console.log(...map(renderAsStr)(...xs))

fun printRaw(x) =
  console.log(render(x))

fun renderAsStr(arg) =
  if arg is Str then arg else render(arg)

val assert = console.assert

fun (??) notImplemented(msg) = throw Error("Not implemented: " + msg)
fun (???) notImplementedError = throw Error("Not implemented")


fun tuple(...xs) = xs

val foldl = fold

// fun foldr(f)(...rest, init) = // TODO allow this syntax
fun foldr(f)(first, ...rest) =
  let len = rest.length
  if len == 0 then first else...
  let
    i = len - 1
    init = rest.at(i)
  while i > 0 do
    set
      i -= 1
      init = f(rest.at(i), init)
  f(first, init)

fun mkStr(...xs) =
  fold((acc, x) => assert(x is Str); acc + x) of ...xs




module TraceLogger with
  mut val enabled = false
  mut val indentLvl = 0
  fun indent() =
    if enabled then
      let prev = indentLvl
      set indentLvl = prev + 1
      prev
    else ()
  fun resetIndent(n) =
    if enabled then
      set indentLvl = n
    else ()
  fun log(msg) =
    if enabled then
      console.log("| ".repeat(indentLvl) + msg.replaceAll("\n", "\n" + "  ".repeat(indentLvl)))
    else ()



// This binds the handler in body, which means body can raise effects in handler
fun enterHandleBlock(handler, body) =
  // This is a simple wrapper of a handler runtime function, which must not be instrumented so cannot be directly implemented here.
  // It also calls other internal runtime functions as well.
  Runtime.enterHandleBlock(handler, body)

fun raiseUnhandledEffect() =
  Runtime.mkEffect(Runtime.FatalEffect, null)
