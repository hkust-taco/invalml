module Token with ...

object
  Angle
  Round
  Square
  Curly
  BeginEnd

type BracketKind = Angle | Round | Square | Curly | BeginEnd

module LiteralKind with
  object
    Integer
    Decimal
    String
    Boolean

type Token = Space | Error | Comment | Identifier | Literal

object
  Space
  Error

class
  Comment(content: Str)
  Identifier(name: Str, symbolic: Bool)
  Literal(kind: LiteralKind, literal: Str)

fun same(a, b) = if
  a is Space and b is Space then true
  a is Comment(c) and b is Comment(c') then c == c'
  a is Identifier(n, s) and b is Identifier(n', s') then n == n' and s == s'
  a is Literal(k, l) and b is Literal(k', l') then k == k' and l == l'
  else false

fun integer(literal) = Literal(LiteralKind.Integer, literal)
fun decimal(literal) = Literal(LiteralKind.Decimal, literal)
fun string(literal) = Literal(LiteralKind.String, literal)
fun boolean(literal) = Literal(LiteralKind.Boolean, literal)
  
fun summary(token) = if token is
  Space then "␠"
  Error then "⚠"
  Comment(_) then "\uD83D\uDCAC" // The text ballon emoji.
  Identifier(name, _) then name
  Literal(_, literal) then literal

fun display(token) = token.toString()
