module Token with ...

object
  Round
  Square
  Curly
  BeginEnd

type BracketKind = Round | Square | Curly | BeginEnd

module LiteralKind with
  object
    Integer
    Decimal
    String
    Boolean

type Token = Space | Comma | Semicolon | Error | Open | Close | Comment | Identifier | TypeVariable | Literal

object
  Space
  Comma
  Semicolon
  Error

class
  Open(kind: BracketKind)
  Close(kind: BracketKind)
  Comment(content: Str)
  Identifier(name: Str, symbolic: Bool)
  TypeVariable(name: Str)
  Literal(kind: LiteralKind, literal: Str)

fun same(a, b) = if
  a is Space and b is Space then true
  a is Comma and b is Comma then true
  a is Semicolon and b is Semicolon then true
  a is Open(k) and b is Open(k') then k == k'
  a is Close(k) and b is Close(k') then k == k'
  a is Comment(c) and b is Comment(c') then c == c'
  a is Identifier(n, s) and b is Identifier(n', s') then n == n' and s == s'
  a is TypeVariable(n) and b is TypeVariable(n') then n == n'
  a is Literal(k, l) and b is Literal(k', l') then k == k' and l == l'
  else false

fun integer(literal) = Literal(LiteralKind.Integer, literal)
fun decimal(literal) = Literal(LiteralKind.Decimal, literal)
fun string(literal) = Literal(LiteralKind.String, literal)
fun boolean(literal) = Literal(LiteralKind.Boolean, literal)
  
fun summary(token) = if token is
  Space then "␠"
  Comma then ","
  Semicolon then ";"
  Error then "⚠"
  Open(kind) and kind is
    Round then "("
    Square then "["
    Curly then "{"
    BeginEnd then "begin"
  Close(kind) and kind is
    Round then ")"
    Square then "]"
    Curly then "}"
    BeginEnd then "end"
  Comment(_) then "\uD83D\uDCAC" // The text ballon emoji.
  Identifier(name, _) then name
  TypeVariable(name) then "'" + name
  Literal(_, literal) then literal

fun display(token) = if token is
  Space then "Space"
  Comma then "Comma"
  Semicolon then "Semicolon"
  Error then "Error"
  Open(kind) then "Open(" + display(kind) + ")"
  Close(kind) then "Close(" + display(kind) + ")"
  Comment(content) then "Comment(" + content + ")"
  Identifier(name, symbolic) then "Identifier(" + name + ", " + symbolic + ")"
  TypeVariable(name) then "TypeVariable(" + name + ")"
  Literal(kind, literal) then
    "Literal(" + display(kind) + ", " + JSON.stringify(literal) + ")"
  Round then "Round"
  Square then "Square"
  Curly then "Curly"
  LiteralKind.Integer then "Integer"
  LiteralKind.Decimal then "Decimal"
  LiteralKind.String then "String"
  LiteralKind.Boolean then "Boolean"
