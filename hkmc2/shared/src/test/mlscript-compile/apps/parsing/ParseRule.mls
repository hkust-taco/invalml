import "../../BetterMap.mls"
import "../../Iter.mls"
import "../../Option.mls"
import "../../Stack.mls"
import "../../Predef.mls"
import "./Token.mls"
import "./Keyword.mls"
import "./Tree.mls"

open BetterMap { Map, toMap }
open Option { Some, None }
open Predef { tuple }
open Stack

type Opt[A] = Some[A] | None

module ParseRule with ...

//  ____                     ____        _
// |  _ \ __ _ _ __ ___  ___|  _ \ _   _| | ___
// | |_) / _` | '__/ __|/ _ \ |_) | | | | |/ _ \
// |  __/ (_| | |  \__ \  __/  _ <| |_| | |  __/
// |_|   \__,_|_|  |___/\___|_| \_\\__,_|_|\___|
//
// =============================================

class ParseRule(val name: Str, val choices: Stack[Choice]) with
  
  fun map(op: Tree -> Tree) =
    ParseRule of
      name
      choices
        Iter.fromStack()
        Iter.mapping of choice => choice Choice.map(op)
        Iter.toStack()
  
  // Append a rule to the end of all choices in this rule.
  fun andThen(rest: ParseRule) = ParseRule of
    name
    choices
      Iter.fromStack()
      Iter.mapping of case
        Choice.Keyword(keyword, rest') then [Choice.Keyword(keyword, rest'.andThen(rest))]
        Choice.Ref(isType, process, outerPrec, innerPrec, rest') then
          [Choice.Ref(isType, process, outerPrec, innerPrec, rest'.andThen(rest))]
        Choice.End then rest.choices Iter.fromStack()
        Choice.Siding(rule, optional, rest') then
          [Choice.Siding(rule, optional, rest'.andThen(rest))]
        Choice.Lazy(get, make) then
          let get' = () => get() andThen(rest)
          let make' = getChoice => make(() => getChoice andThen(rest))
          [Choice.Lazy(get', make')]
      Iter.flattening()
      Iter.toStack()
  
  let _endChoice = None
  
  let _computeEndChoice = () => choices
    Iter.fromStack()
    Iter.firstDefined of choice =>
      if choice Choice.forced() is
        Choice.End(value) then Some(value)
        Choice.Siding(_, _, rest) then rest.endChoice // TODO: is this correct?
        else None
  
  // Collect the first end choice in this rule.
  fun endChoice = if _endChoice is
    None then
      let computed = _computeEndChoice()
      set _endChoice = Some(computed)
      computed
    Some(cache) then cache
  
  // Manual memoization for keyword choices.
  let _keywordChoices = None
  
  let _computeKeywordsChoices = () => choices
    Iter.fromStack()
    Iter.mapping of choice => if choice Choice.forced() is
      Choice.Keyword(keyword, rest) then [[keyword.name, rest]]
      Choice.Siding(rule, optional, rest) then rule.keywordChoices
        Iter.mapping of case [keyword, rule] then
          [keyword, rule.andThen(rest)]
        Iter.appended of if optional then [] else rest.keywordChoices
        Iter.toArray()
      else []
    Iter.flattening()
    Iter.toArray()
    toMap()
  
  // Collect all keyword choices in this rule.
  fun keywordChoices = if _keywordChoices is
    None then
      let computed = _computeKeywordsChoices()
      set _keywordChoices = Some(computed)
      computed
    Some(cache) then cache
  
  let _exprChoice = None
  
  let _computeExprChoice = () => choices
    Iter.fromStack()
    Iter.firstDefined of choice => if choice Choice.forced() is
      Choice.Ref(isType, process, outerPrec, innerPrec, rest) then
        Some([isType, process, outerPrec, innerPrec, rest])
      Choice.Siding(rule, optional, rest) and
        rule.exprChoice is Some([kind, process, outerPrec, innerPrec, rest']) then
          Some([kind, process, outerPrec, innerPrec rest'.andThen(rest)])
        optional then rest.exprChoice
        else None
      else None
  
  fun exprChoice = if _exprChoice is
    None then
      let computed = _computeExprChoice()
      set _exprChoice = Some(computed)
      computed
    Some(cache) then cache
  
  // Display parse rules as a tree in a BNF-like format.
  fun display =
    object Knot
    fun displayChoice(choice) = if choice is
      Choice.Keyword(keyword, rest) and
        let prefix = "\"" + keyword.name + "\""
        tail(rest) is [name, line] then [prefix + line]
      Choice.Ref(kind, _, _, _, rest) and
        let prefix = "<" + kind + ">"
        tail(rest) is [name, line] then [prefix + line]
      Choice.Siding(rule, optional, rest) then
        let ruleContent = if go(rule, false) is [name, line] then line
        let prefix = if optional then "[" + ruleContent + "]" else "(" + ruleContent + ")"
        if tail(rest) is [name, line] then [prefix + line]
      Choice.End then [""]
      Choice.Lazy(get, make) and
        get() is Knot then ["<rec>"]
        else displayChoice(make(() => Knot))
      other then ["<unknown>" + JSON.stringify(other)]
    fun tail(rest) = if rest is ParseRule(_, choices) and
      choices is Choice.End :: Nil then ["", ""]
      go(rest, false) is [name, line] and
        choices is _ :: _ :: _ and
          choices Iter.fromStack() Iter.some(c => c is Choice.End) then
            [name, " [" + line + "]"]
          else [name, " (" + line + ")"]
        else [name, " " + line]
    fun go(rule, top) =
      let content = rule.choices
        Iter.fromStack()
        Iter.filtering of case
          Choice.End then false
          else true
        Iter.mapping of displayChoice
        Iter.joined of if top then "\n  | " else " | "
      tuple of
        rule.name
        if
          top then "\n  | " + content
          rule.choices.length > 1 then "(" + content + ")"
          else content
    if go(this, true) is [name, line] then "<" + name + "> ::= " + line

// Shorthands for constructing parse rules.
// Automatically adds an end choice to the rule if no choices are provided.
fun rule(name, ...choices) = ParseRule of
  name
  if choices.length == 0 then
    Choice.end(()) :: Nil
  else
    choices Iter.toStack()

module Choice with
  class Keyword(keyword: Keyword, rest: ParseRule)
  class Ref(kind: Str, process: Tree -> Tree, outerPrec: Opt[Int], innerPrec: Opt[Int], rest: ParseRule)
  class End(value: Tree)
  class Siding(rule: ParseRule, optional: Bool, rest: ParseRule)
  class Lazy(get: () -> Choice, make: (() -> Choice) -> Choice)
  
  fun rest(choice) = if choice is
    Lazy(get, _) then get() rest()
    Keyword(_, rest) then Some(rest)
    Ref(_, _, _, _, rest) then Some(rest)
    Siding(_, rest) then Some(rest)
    End then None
  
  fun forced(choice) = if choice is Lazy(get, _) then get() else choice
  // Shorthands for constructing rule choices.
  fun keyword(keyword, ...choices) =
    Keyword(keyword, rule("`" + keyword.name + "` keyword", ...choices))
  fun reference(kind, process, name, ...choices) =
    Ref(kind, process, None, None, rule(name, ...choices))
  fun term(process, name, ...choices) =
    Ref("term", process, None, None, rule(name, ...choices))
  fun termWithPrec(process, name, outerPrec, innerPrec, ...choices) =
    Ref("term", process, outerPrec, innerPrec, rule(name, ...choices))
  fun typeExpr(process, name, ...choices) =
    Ref("type", process, None, None, rule(name, ...choices))
  fun optional(rule, rest) = Siding(rule, true, rest)
  fun siding(rule, rest) = Siding(rule, false, rest)
  fun end(value) = End(value)
  fun lazy(makeChoice) =
    let cache = None
    fun getChoice() =
      if cache is Some(choice) then choice else ...
      set cache = makeChoice(getChoice)
      cache
    Lazy(getChoice, makeChoice)
  
  fun map(choice: Choice, op: Tree -> Tree) = if choice is
    Keyword(keyword, rest) then Keyword(keyword, rest.map(op))
    Ref(kind, process, outerPrec, innerPrec, rest) then
      Ref(kind, (x, y) => op(process(x, y)), outerPrec, innerPrec, rest)
    Siding(rule, optional, rest) then Siding(rule.map(op), optional, rest.map(op))
    End(value) then End(op(value))
