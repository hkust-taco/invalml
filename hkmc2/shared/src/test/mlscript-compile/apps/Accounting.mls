
import "fs"

import "../Str.mls"
open Str

import "../Predef.mls"
open Predef


declare class Num
declare class Bool

declare val String


data class Accounting with ...


fun display(amt): Str = (amt / 1000).toFixed(1)

val warnings = []


data class Project(val num: Str)


data class Line(val name: Str, val proj: Project, val starting_balance: Num, val isMatchable: Bool) with
  mut val balance = starting_balance
  fun expense(amt) =
    set balance = balance -. amt
  fun mustBeEmpty() =
    if balance > 10_000 do
      warnings.push of "> **❗️** Unspent balance of " ~ name ~ ": `" ~ display(balance) ~ "`"

val lines = []

fun mkLine(nme, proj, starting_balance, matchable) =
  let line = Line(nme, proj, starting_balance, matchable)
  lines.push(line)
  line


data class Report(fileName) with
  
  fs.writeFileSync(fileName, "# Accounting\n")
  
  fun w(txt) =
    fs.appendFileSync(fileName, txt)
  fun wln(txt) =
    fs.appendFileSync(fileName, txt ~ "\n")
  
  fun init() =
    wln of ""
    wln of "|" ~ "Year" ~ "|" ~ lines.map(x => x.name).join("|") ~ "|"
    wln of "|" ~ "---" ~ "|" ~ lines.map(x => "--:").join("|") ~ "|"
  
  fun snapShot(label) =
    wln of "|" ~ String(label) ~ "|" ~ lines.map(x => display(x.balance)).join("|") ~ "|"
    
  fun wrapUp() =
    wln of ""
    warnings.forEach of x => (wln(x), wln(""))
    wln of "### Remaining Available Funds"
    wln of ""
    wln of "|" ~ "Summary" ~ "|   |"
    wln of "|" ~ "---" ~ "|--:|"
    wln of "|" ~ "Matchable" ~ "|" ~ display(
      lines.filter(x => x.isMatchable).map(x => x.balance).reduce((a, b) => a +. b, 0)
    ) ~ "|"
    wln of "|" ~ "Non-matchable" ~ "|" ~ display(
      lines.filter(x => not(x.isMatchable)).map(x => x.balance).reduce((a, b) => a +. b, 0)
    ) ~ "|"

fun process(filename, k) =
  let report = Report(filename)
  report.init()
  k(report)
  report.wrapUp()
  print of "Report written to " ~ filename


