:js

import "../../mlscript-compile/apps/parsing/Test.mls"

open Test { example }

example of ":tree ((x) ==> x"
//│ > Error:
//│ >   tree = App:
//│ >     callee = Ident of "==>"
//│ >     arguments = Stack of 
//│ >       Ident of "x"
//│ >       Ident of "x"
//│ >   message = "unexpected end of input"
//│ > «<⚠:x ==> x>»

example of ":tree ((x) ==> x))"
//│ > App:
//│ >   callee = Ident of "==>"
//│ >   arguments = Stack of 
//│ >     Ident of "x"
//│ >     Ident of "x"
//│ > Error of "unexpected keyword )"
//│ > «x ==> x»
//│ > «⚠»

example of """
type a = b and b = c
"""
//│ > «type a = b and b = c»

example of """
:tree
type test = Bar | Test | Foo
and test' = Bar' | Test' | Foo'
"""
//│ > Define:
//│ >   kind = Type
//│ >   items = Stack of 
//│ >     Pair:
//│ >       first = Ident of "test"
//│ >       second = Infix:
//│ >         op = Keyword(`|`, N/A, 4)
//│ >         lhs = Ident of "Bar"
//│ >         rhs = Infix:
//│ >           op = Keyword(`|`, N/A, 4)
//│ >           lhs = Ident of "Test"
//│ >           rhs = Ident of "Foo"
//│ >     Pair:
//│ >       first = Ident of "test'"
//│ >       second = Infix:
//│ >         op = Keyword(`|`, N/A, 4)
//│ >         lhs = Ident of "Bar'"
//│ >         rhs = Infix:
//│ >           op = Keyword(`|`, N/A, 4)
//│ >           lhs = Ident of "Test'"
//│ >           rhs = Ident of "Foo'"
//│ > «type test = Bar | Test | Foo and test' = Bar' | Test' | Foo'»
