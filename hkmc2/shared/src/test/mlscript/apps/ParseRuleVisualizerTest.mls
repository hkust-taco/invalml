:js

import "../../mlscript-compile/apps/Parser.mls"
import "../../mlscript-compile/apps/parsing/ParseRuleVisualizer.mls"
import "../../mlscript-compile/apps/parsing/Rules.mls"
import "../../mlscript-compile/Iter.mls"
import "../../mlscript-compile/XML.mls"

open ParseRuleVisualizer { render, CSS_CONTENT, filePath }
open Rules { termRule, declRule, typeRule }
open XML { html, tag, elem, style }

fun toHTML(...elements) = html(["lang", "en"]) of
  elem("head") of
    tag("meta") of ["charset", "UTF-8"]
    tag("meta") of
      ["name", "viewport"]
      ["content", "width=device-width, initial-scale=1.0"]
    tag("link") of
      ["href", "https://cdn.jsdelivr.net/npm/typeface-inconsolata@1.1.13/index.min.css"]
      ["rel", "stylesheet"]
    elem("title") of "Parse Rules"
  elem("body", style of ["padding", "1em"]) of
    elem("div", style of
      ["display", "flex"]
      ["flex-direction", "column"]
      ["gap", "1em"]
    ) of
      ...elements
    elem("style") of
      "body{margin:0;font-family:system-ui,sans-serif;font-size:16px}"
      "figure{margin:0;display:flex;flex-direction:column;gap:0.5em}"
      "figcaption{font-style:italic;font-weight:600}"
      "figure:target figcaption{color:#007bff}"
      "figure:target figcaption::before{font-style:normal;content:'⯈ '}"
      "figure:target figcaption::after{font-style:normal;content:' ⯇'}"
      CSS_CONTENT

fun toElements(diagrams) =
  diagrams
    Iter.mapping of case [caption, svg] then
      elem("figure", ["id", caption]) of
        elem("figcaption") of caption
        svg
    Iter.toArray()

fs.writeFileSync of
  filePath of "rule.html"
  toHTML of
    elem("h1") of "Parse Rules"
    elem("h2") of "Terms"
    ...toElements of render("term", termRule)
    elem("h2") of "Types"
    ...toElements of render("type", typeRule)
    elem("h2") of "Definitions"
    ...toElements of render("definition", declRule)
  "utf-8"
