:js

import "../../mlscript-compile/apps/Lexer.mls"

fun lines(...strs) = strs.join("\n")

open Lexer

(lex of lines of
  "let rec factorial x = // a simple factorial function",
  "  if x <= 1 then 1 else x * factorial (x - 1)",
  "",
  "let bool_of_string = function",
  "  | \"true\" -> true",
  "  | \"false\" -> false",
  "  | _ -> raise (Invalid_argument \"bool_of_string\")",
).map of (x, i, a) => Token.display(x)
//│ = ["Identifier(let, false)", "Space", "Identifier(rec, false)", "Space", "Identifier(factorial, false)", "Space", "Identifier(x, false)", "Space", "Identifier(=, true)", "Space", "Comment( a simple factorial function)", "Space", "Identifier(if, false)", "Space", "Identifier(x, false)", "Space", "Identifier(<=, true)", "Space", "Literal(Integer, 1)", "Space", "Identifier(then, false)", "Space", "Literal(Integer, 1)", "Space", "Identifier(else, false)", "Space", "Identifier(x, false)", "Space", "Identifier(*, true)", "Space", "Identifier(factorial, false)", "Space", "Open(Round)", "Identifier(x, false)", "Space", "Identifier(-, true)", "Space", "Literal(Integer, 1)", "Close(Round)", "Space", "Identifier(let, false)", "Space", "Identifier(bool_of_string, false)", "Space", "Identifier(=, true)", "Space", "Identifier(function, false)", "Space", "Identifier(|, true)", "Space", "Literal(String, true)", "Space", "Identifier(->, true)", "Space", "Identifier(true, false)", "Space", "Identifier(|, true)", "Space", "Literal(String, false)", "Space", "Identifier(->, true)", "Space", "Identifier(false, false)", "Space", "Identifier(|, true)", "Space", "Identifier(_, false)", "Space", "Identifier(->, true)", "Space", "Identifier(raise, false)", "Space", "Open(Round)", "Identifier(Invalid_argument, false)", "Space", "Literal(String, bool_of_string)", "Close(Round)"]

:e
// It would be decent if we allow pattern parameters in functions.
fun take(pattern P, idx: Str, acc: Str) =
  while idx < str.length and str.charAt(idx) is ch and ch is P
    then
      set idx = idx + 1
      set acc = acc + ch
    else [acc, idx]
//│ ╔══[ERROR] Name not found: str
//│ ║  l.23: 	  while idx < str.length and str.charAt(idx) is ch and ch is P
//│ ╙──      	              ^^^
//│ ╔══[ERROR] Name not found: str
//│ ║  l.23: 	  while idx < str.length and str.charAt(idx) is ch and ch is P
//│ ╙──      	                             ^^^
//│ ╔══[ERROR] Cannot use this identifier as a pattern
//│ ║  l.23: 	  while idx < str.length and str.charAt(idx) is ch and ch is P
//│ ╙──      	                                                             ^

:e
// We can mitigate the boilerplate if we support split around `of`.
fun foobar(x) = if x is
  None then "hello"
  Some of
    a then a
//│ ╔══[ERROR] Unrecognized pattern split.
//│ ║  l.42: 	  Some of
//│ ║        	  ^^^^^^^
//│ ║  l.43: 	    a then a
//│ ╙──      	^^^^^^^^^^^^
//│ ╔══[ERROR] Name not found: None
//│ ║  l.41: 	  None then "hello"
//│ ╙──      	  ^^^^
//│ ╔══[ERROR] Cannot use this identifier as a pattern
//│ ║  l.41: 	  None then "hello"
//│ ╙──      	  ^^^^
