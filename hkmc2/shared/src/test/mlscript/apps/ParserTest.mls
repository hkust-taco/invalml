:js

import "../../mlscript-compile/apps/Lexer.mls"
import "../../mlscript-compile/apps/Parser.mls"

open Lexer { Token, LiteralKind }
open Parser { parse, showAsTree, tracer }

Parser.Keywords.maxPrec
//│ = 7

Parser.opPrec(";")
//│ = [2147483647, 2147483647]

Parser.opPrec("|>")
//│ = [10, 16]

print of Parser.keywords.values.join("\n")
//│ > Keyword(`class`, N/A, 0)
//│ > Keyword(`begin`, N/A, 0)
//│ > Keyword(`end`, 0, N/A)
//│ > Keyword(`;`, 1, 0)
//│ > Keyword(`,`, 2, 1)
//│ > Keyword(`=`, 3, 3)
//│ > Keyword(`|`, N/A, 4)
//│ > Keyword(`:`, 4, 3)
//│ > Keyword(`match`, N/A, 4)
//│ > Keyword(`if`, N/A, 4)
//│ > Keyword(`with`, N/A, 4)
//│ > Keyword(`case`, N/A, 4)
//│ > Keyword(`then`, 5, 5)
//│ > Keyword(`do`, 5, 5)
//│ > Keyword(`else`, 6, 6)
//│ > Keyword(`let`, 7, 7)
//│ > Keyword(`in`, 5, 5)
//│ > Keyword(`true`, N/A, N/A)
//│ > Keyword(`false`, N/A, N/A)
//│ > Keyword(`->`, 7, 3)
//│ > Keyword(`fun`, 7, N/A)
//│ > Keyword(`function`, 7, N/A)
//│ > Keyword(`type`, 7, N/A)
//│ > Keyword(`rec`, N/A, N/A)
//│ > Keyword(`_`, N/A, N/A)

print of Parser.prefixRules.display
//│ > <start of the statement> ::= `let` <expression> 
//│ >   `=` <expression> 
//│ >     `in` <expression> <end>
//│ >     <end>
//│ >   <end>
//│ > `fun` <expression> `->` <expression> <end>
//│ > `type` <expression> `=` <expression> <end>
//│ > `match` <expression> 
//│ >   `with` `|` <expression> 
//│ >     `->` <expression> 
//│ >       <end>
//│ >       `|` <rec>
//│ >   <expression> 
//│ >     `->` <expression> 
//│ >       <end>
//│ >       `|` <rec>
//│ > `function` `|` <expression> 
//│ >   `->` <expression> 
//│ >     <end>
//│ >     `|` <rec>
//│ > <expression> 
//│ >   `->` <expression> 
//│ >     <end>
//│ >     `|` <rec>
//│ > `if` <expression> 
//│ >   `then` <expression> 
//│ >     `else` <expression> <end>
//│ >     <end>
//│ > `_` <end>

print of Parser.infixRules.display
//│ > <the continuation of expressions> ::= `|` <expression> <end>

fun printParsed(...lines) =
  tracer.reset()
  let
    source = lines.join("\n")
    tokens = Lexer.lex(source)
    tree = parse(tokens)
  print of showAsTree(tree)
  
fun debugParsed(...lines) =
  set tracer.enabled = true
  let result = printParsed of ...lines
  set tracer.enabled = false
  result

printParsed of "(x) => x"
//│ > App:
//│ >   callee = Ident of "=>"
//│ >   arguments = Stack of 
//│ >     Ident of "x"
//│ >     Ident of "x"

printParsed of "(1 + 2) * 3"
//│ > App:
//│ >   callee = Ident of "*"
//│ >   arguments = Stack of 
//│ >     App:
//│ >       callee = Ident of "+"
//│ >       arguments = Stack of 
//│ >         Literal#Integer of "1"
//│ >         Literal#Integer of "2"
//│ >     Literal#Integer of "3"

printParsed of "1 + 2 ** 5 * 4"
//│ > App:
//│ >   callee = Ident of "+"
//│ >   arguments = Stack of 
//│ >     Literal#Integer of "1"
//│ >     App:
//│ >       callee = Ident of "*"
//│ >       arguments = Stack of 
//│ >         App:
//│ >           callee = Ident of "**"
//│ >           arguments = Stack of 
//│ >             Literal#Integer of "2"
//│ >             Literal#Integer of "5"
//│ >         Literal#Integer of "4"

printParsed of "let zero = 0 in zero"
//│ > Ternary:
//│ >   name = Keyword(`let`, 7, 7)
//│ >   lhs = Ident of "zero"
//│ >   rhs = Some of Literal#Integer of "0"
//│ >   body = Some of Ident of "zero"

printParsed of """
let one = 1 in
let zero = 0 in
one + zero
"""
//│ > Ternary:
//│ >   name = Keyword(`let`, 7, 7)
//│ >   lhs = Ident of "one"
//│ >   rhs = Some of Literal#Integer of "1"
//│ >   body = Some of Ternary:
//│ >     name = Keyword(`let`, 7, 7)
//│ >     lhs = Ident of "zero"
//│ >     rhs = Some of Literal#Integer of "0"
//│ >     body = Some of App:
//│ >       callee = Ident of "+"
//│ >       arguments = Stack of 
//│ >         Ident of "one"
//│ >         Ident of "zero"

printParsed of """
f x y
"""
//│ > App:
//│ >   callee = App:
//│ >     callee = Ident of "f"
//│ >     arguments = Stack of 
//│ >       Ident of "x"
//│ >   arguments = Stack of 
//│ >     Ident of "y"

printParsed of """
let pi = 4.0 *. atan 1.0
"""
//│ > Ternary:
//│ >   name = Keyword(`let`, 7, 7)
//│ >   lhs = Ident of "pi"
//│ >   rhs = Some of App:
//│ >     callee = Ident of "*."
//│ >     arguments = Stack of 
//│ >       Literal#Decimal of "4.0"
//│ >       App:
//│ >         callee = Ident of "atan"
//│ >         arguments = Stack of 
//│ >           Literal#Decimal of "1.0"
//│ >   body = None

printParsed of "let square x = x *. x"
//│ > Ternary:
//│ >   name = Keyword(`let`, 7, 7)
//│ >   lhs = App:
//│ >     callee = Ident of "square"
//│ >     arguments = Stack of 
//│ >       Ident of "x"
//│ >   rhs = Some of App:
//│ >     callee = Ident of "*."
//│ >     arguments = Stack of 
//│ >       Ident of "x"
//│ >       Ident of "x"
//│ >   body = None

printParsed of "square (sin pi) +. square (cos pi)"
//│ > App:
//│ >   callee = Ident of "+."
//│ >   arguments = Stack of 
//│ >     App:
//│ >       callee = Ident of "square"
//│ >       arguments = Stack of 
//│ >         App:
//│ >           callee = Ident of "sin"
//│ >           arguments = Stack of 
//│ >             Ident of "pi"
//│ >     App:
//│ >       callee = Ident of "square"
//│ >       arguments = Stack of 
//│ >         App:
//│ >           callee = Ident of "cos"
//│ >           arguments = Stack of 
//│ >             Ident of "pi"

:todo
printParsed of "(1 < 2) = false"
//│ > App:
//│ >   callee = Ident of "<"
//│ >   arguments = Stack of 
//│ >     Literal#Integer of "1"
//│ >     Literal#Integer of "2"

printParsed of "let cat s1 s2 = s1 ^ \" \" ^ s2"
//│ > Ternary:
//│ >   name = Keyword(`let`, 7, 7)
//│ >   lhs = App:
//│ >     callee = App:
//│ >       callee = Ident of "cat"
//│ >       arguments = Stack of 
//│ >         Ident of "s1"
//│ >     arguments = Stack of 
//│ >       Ident of "s2"
//│ >   rhs = Some of App:
//│ >     callee = Ident of "^"
//│ >     arguments = Stack of 
//│ >       App:
//│ >         callee = Ident of "^"
//│ >         arguments = Stack of 
//│ >           Ident of "s1"
//│ >           Literal#String of " "
//│ >       Ident of "s2"
//│ >   body = None

printParsed of "fun x -> x"
//│ > Lambda:
//│ >   params = Stack of 
//│ >     Ident of "x"
//│ >   body = Ident of "x"

printParsed of """
let compose f g = fun x -> f (g x) in
let cos2 = compose square cos
"""
//│ > Ternary:
//│ >   name = Keyword(`let`, 7, 7)
//│ >   lhs = App:
//│ >     callee = App:
//│ >       callee = Ident of "compose"
//│ >       arguments = Stack of 
//│ >         Ident of "f"
//│ >     arguments = Stack of 
//│ >       Ident of "g"
//│ >   rhs = Some of Lambda:
//│ >     params = Stack of 
//│ >       Ident of "x"
//│ >     body = App:
//│ >       callee = Ident of "f"
//│ >       arguments = Stack of 
//│ >         App:
//│ >           callee = Ident of "g"
//│ >           arguments = Stack of 
//│ >             Ident of "x"
//│ >   body = Some of Ternary:
//│ >     name = Keyword(`let`, 7, 7)
//│ >     lhs = Ident of "cos2"
//│ >     rhs = Some of App:
//│ >       callee = App:
//│ >         callee = Ident of "compose"
//│ >         arguments = Stack of 
//│ >           Ident of "square"
//│ >       arguments = Stack of 
//│ >         Ident of "cos"
//│ >     body = None

:todo
printParsed of "type sign = Positive | Negative"
//│ > Ternary:
//│ >   name = Keyword(`type`, 7, N/A)
//│ >   lhs = Ident of "sign"
//│ >   rhs = Ident of "Positive"
//│ >   body = None

printParsed of "true"
//│ > Literal#Boolean of "true"

printParsed of "match x with true -> 1 | false -> 0"
//│ > Match:
//│ >   scrutinee = Ident("x", false)
//│ >   branches = Stack of 
//│ >     Infix:
//│ >       op = Keyword(`->`, 7, 3)
//│ >       lhs = Literal#Boolean of "true"
//│ >       rhs = Literal#Integer of "1"
//│ >     Infix:
//│ >       op = Keyword(`->`, 7, 3)
//│ >       lhs = Literal#Boolean of "false"
//│ >       rhs = Literal#Integer of "0"

printParsed of """
function (0, 0) -> "both zero"
       | (0, _) -> "first only zero"
       | (_, 0) -> "second only zero"
       | (_, _) -> "neither zero"
"""
//│ > Match:
//│ >   scrutinee = Empty()
//│ >   branches = Stack of 
//│ >     Infix:
//│ >       op = Keyword(`->`, 7, 3)
//│ >       lhs = Tuple of Stack of 
//│ >         Literal#Integer of "0"
//│ >         Literal#Integer of "0"
//│ >       rhs = Literal#String of "both zero"
//│ >     Infix:
//│ >       op = Keyword(`->`, 7, 3)
//│ >       lhs = Tuple of Stack of 
//│ >         Literal#Integer of "0"
//│ >         Underscore
//│ >       rhs = Literal#String of "first only zero"
//│ >     Infix:
//│ >       op = Keyword(`->`, 7, 3)
//│ >       lhs = Tuple of Stack of 
//│ >         Underscore
//│ >         Literal#Integer of "0"
//│ >       rhs = Literal#String of "second only zero"
//│ >     Infix:
//│ >       op = Keyword(`->`, 7, 3)
//│ >       lhs = Tuple of Stack of 
//│ >         Underscore
//│ >         Underscore
//│ >       rhs = Literal#String of "neither zero"

set tracer.enabled = false

printParsed of "if f x then y else z"
//│ > Ternary:
//│ >   name = Keyword(`if`, N/A, 4)
//│ >   lhs = App:
//│ >     callee = Ident of "f"
//│ >     arguments = Stack of 
//│ >       Ident of "x"
//│ >   rhs = Ident of "y"
//│ >   body = Some of Ident of "z"

printParsed of "if f x then if g x then z else w else if h x then y else w"
//│ > Ternary:
//│ >   name = Keyword(`if`, N/A, 4)
//│ >   lhs = App:
//│ >     callee = Ident of "f"
//│ >     arguments = Stack of 
//│ >       Ident of "x"
//│ >   rhs = Ternary:
//│ >     name = Keyword(`if`, N/A, 4)
//│ >     lhs = App:
//│ >       callee = Ident of "g"
//│ >       arguments = Stack of 
//│ >         Ident of "x"
//│ >     rhs = Ident of "z"
//│ >     body = Some of Ident of "w"
//│ >   body = Some of Ternary:
//│ >     name = Keyword(`if`, N/A, 4)
//│ >     lhs = App:
//│ >       callee = Ident of "h"
//│ >       arguments = Stack of 
//│ >         Ident of "x"
//│ >     rhs = Ident of "y"
//│ >     body = Some of Ident of "w"

printParsed of "1, 2, 3"
//│ > Tuple of Stack of 
//│ >   Literal#Integer of "1"
//│ >   Literal#Integer of "2"
//│ >   Literal#Integer of "3"

printParsed of "1; 2; 3"
//│ > Sequence of Stack of 
//│ >   Literal#Integer of "1"
//│ >   Literal#Integer of "2"
//│ >   Literal#Integer of "3"

printParsed of "1, 2; 3, 4; 5"
//│ > Sequence of Stack of 
//│ >   Tuple of Stack of 
//│ >     Literal#Integer of "1"
//│ >     Literal#Integer of "2"
//│ >   Tuple of Stack of 
//│ >     Literal#Integer of "3"
//│ >     Literal#Integer of "4"
//│ >   Literal#Integer of "5"

// > The expressions `( expr )` and `begin expr end` have the same value as `expr`.
// > The two constructs are semantically equivalent, but it is good style to use
// > `begin … end` inside control structures.
printParsed of """
begin
  print_string "hello";
  print_string "world"
end
"""
//│ > Sequence of Stack of 
//│ >   App:
//│ >     callee = Ident of "print_string"
//│ >     arguments = Stack of 
//│ >       Literal#String of "hello"
//│ >   App:
//│ >     callee = Ident of "print_string"
//│ >     arguments = Stack of 
//│ >       Literal#String of "world"

printParsed of """
if a == b then
  a
else
  b
"""
//│ > Ternary:
//│ >   name = Keyword(`if`, N/A, 4)
//│ >   lhs = App:
//│ >     callee = Ident of "=="
//│ >     arguments = Stack of 
//│ >       Ident of "a"
//│ >       Ident of "b"
//│ >   rhs = Ident of "a"
//│ >   body = Some of Ident of "b"

:todo
printParsed of """
let f a b =
  if a == b then
    print_endline "Equal"
  else begin
    print_string "Not Equal: ";
    print_int a;
    print_string " and ";
    print_int b;
    print_newline ()
  end
"""
//│ > Ternary:
//│ >   name = Keyword(`let`, 7, 7)
//│ >   lhs = App:
//│ >     callee = App:
//│ >       callee = Ident of "f"
//│ >       arguments = Stack of 
//│ >         Ident of "a"
//│ >     arguments = Stack of 
//│ >       Ident of "b"
//│ >   rhs = Some of Ternary:
//│ >     name = Keyword(`if`, N/A, 4)
//│ >     lhs = App:
//│ >       callee = Ident of "=="
//│ >       arguments = Stack of 
//│ >         Ident of "a"
//│ >         Ident of "b"
//│ >     rhs = App:
//│ >       callee = Ident of "print_endline"
//│ >       arguments = Stack of 
//│ >         Literal#String of "Equal"
//│ >     body = Some of Sequence of Stack of 
//│ >       App:
//│ >         callee = Ident of "print_string"
//│ >         arguments = Stack of 
//│ >           Literal#String of "Not Equal: "
//│ >       App:
//│ >         callee = Ident of "print_int"
//│ >         arguments = Stack of 
//│ >           Ident of "a"
//│ >       App:
//│ >         callee = Ident of "print_string"
//│ >         arguments = Stack of 
//│ >           Literal#String of " and "
//│ >       App:
//│ >         callee = Ident of "print_int"
//│ >         arguments = Stack of 
//│ >           Ident of "b"
//│ >       Ident of "print_newline"
//│ >   body = None

printParsed of """
let translate p dx dy =
    p.x <- p.x +. dx; p.y <- p.y +. dy
"""
//│ > Sequence of Stack of 
//│ >   Ternary:
//│ >     name = Keyword(`let`, 7, 7)
//│ >     lhs = App:
//│ >       callee = App:
//│ >         callee = App:
//│ >           callee = Ident of "translate"
//│ >           arguments = Stack of 
//│ >             Ident of "p"
//│ >         arguments = Stack of 
//│ >           Ident of "dx"
//│ >       arguments = Stack of 
//│ >         Ident of "dy"
//│ >     rhs = Some of App:
//│ >       callee = Ident of "+."
//│ >       arguments = Stack of 
//│ >         App:
//│ >           callee = Ident of "<-"
//│ >           arguments = Stack of 
//│ >             App:
//│ >               callee = Ident of "."
//│ >               arguments = Stack of 
//│ >                 Ident of "p"
//│ >                 Ident of "x"
//│ >             App:
//│ >               callee = Ident of "."
//│ >               arguments = Stack of 
//│ >                 Ident of "p"
//│ >                 Ident of "x"
//│ >         Ident of "dx"
//│ >     body = None
//│ >   App:
//│ >     callee = Ident of "+."
//│ >     arguments = Stack of 
//│ >       App:
//│ >         callee = Ident of "<-"
//│ >         arguments = Stack of 
//│ >           App:
//│ >             callee = Ident of "."
//│ >             arguments = Stack of 
//│ >               Ident of "p"
//│ >               Ident of "y"
//│ >           App:
//│ >             callee = Ident of "."
//│ >             arguments = Stack of 
//│ >               Ident of "p"
//│ >               Ident of "y"
//│ >       Ident of "dy"
