:js
:llir
:cpp

:sllir
:intl
fun f1() =
  let x = 1
  let x = 2
  x
f1()
//│ = 2
//│ LLIR:
//│   
//│   def f1$729() =
//│     let x$737 = 1 in
//│     let x$738 = 2 in
//│     x$738
//│   def entry$740() =
//│     let* (x$739) = f1() in
//│     x$739
//│   entry = entry$740
//│ 
//│ Interpreted:
//│ 2

:sllir
:intl
fun f2() =
  let x = 0
  if x == 1 then 2 else 3
f2()
//│ = 3
//│ LLIR:
//│   
//│   def f2$741() =
//│     let x$750 = 0 in
//│     let x$751 = ==(x$750,1) in
//│     case x$751 of
//│       BoolLit(true) =>
//│         2
//│       _ =>
//│         3
//│   def j$752() =
//│     undefined
//│   def entry$754() =
//│     let* (x$753) = f2() in
//│     x$753
//│   entry = entry$754
//│ 
//│ Interpreted:
//│ 3


:sllir
fun f3() =
  let x1 = 0
  let x2 = 1
  if true then x1 else x2
f3()
//│ = 0
//│ LLIR:
//│   
//│   def f3$755() =
//│     let x$764 = 0 in
//│     let x$765 = 1 in
//│     let x$766 = true in
//│     case x$766 of
//│       BoolLit(true) =>
//│         x$764
//│       _ =>
//│         x$765
//│   def j$767() =
//│     undefined
//│   def entry$769() =
//│     let* (x$768) = f3() in
//│     x$768
//│   entry = entry$769


:sllir
:intl
fun f4() =
  let x = 0
  let x = if x == 1 then 2 else 3
  x
f4()
//│ = 3
//│ LLIR:
//│   
//│   def f4$770() =
//│     let x$782 = 0 in
//│     let x$783 = ==(x$782,1) in
//│     case x$783 of
//│       BoolLit(true) =>
//│         let x$785 = 2 in
//│         jump j$784(x$785)
//│       _ =>
//│         let x$786 = 3 in
//│         jump j$784(x$786)
//│   def j$784(tmp$781) =
//│     tmp$781
//│   def entry$788() =
//│     let* (x$787) = f4() in
//│     x$787
//│   entry = entry$788
//│ 
//│ Interpreted:
//│ 3

:sllir
:intl
fun f5() =
  let x = 0
  let x = if x == 1 then 2 else 3
  let x = if x == 2 then 4 else 5
  x
f5()
//│ = 5
//│ LLIR:
//│   
//│   def f5$789() =
//│     let x$806 = 0 in
//│     let x$807 = ==(x$806,1) in
//│     case x$807 of
//│       BoolLit(true) =>
//│         let x$809 = 2 in
//│         jump j$808(x$809)
//│       _ =>
//│         let x$810 = 3 in
//│         jump j$808(x$810)
//│   def j$808(tmp$804) =
//│     let x$811 = ==(tmp$804,2) in
//│     case x$811 of
//│       BoolLit(true) =>
//│         let x$813 = 4 in
//│         jump j$812(x$813)
//│       _ =>
//│         let x$814 = 5 in
//│         jump j$812(x$814)
//│   def j$812(tmp$805) =
//│     tmp$805
//│   def entry$816() =
//│     let* (x$815) = f5() in
//│     x$815
//│   entry = entry$816
//│ 
//│ Interpreted:
//│ 5

:sllir
fun test() =
  if true do test()
//│ LLIR:
//│   
//│   def test$817() =
//│     let x$824 = true in
//│     case x$824 of
//│       BoolLit(true) =>
//│         let* (x$826) = test() in
//│         x$826
//│       _ =>
//│         undefined
//│   def j$825() =
//│     undefined
//│   def entry$827() =
//│     undefined
//│   entry = entry$827

:sllir
fun test() =
  (if true then test()) + 1
//│ LLIR:
//│   
//│   def test$828() =
//│     let x$838 = true in
//│     case x$838 of
//│       BoolLit(true) =>
//│         let* (x$840) = test() in
//│         jump j$839(x$840)
//│       _ =>
//│         panic "match error"
//│   def j$839(tmp$837) =
//│     let x$841 = +(tmp$837,1) in
//│     x$841
//│   def entry$842() =
//│     undefined
//│   entry = entry$842


:sllir
:intl
fun f() =
  let x = 10
  if true do
    set x += 1
  x
f()
//│ = 11
//│ LLIR:
//│   
//│   def f$843() =
//│     let x$856 = 10 in
//│     let x$857 = true in
//│     case x$857 of
//│       BoolLit(true) =>
//│         let x$859 = +(x$856,1) in
//│         let x$860 = undefined in
//│         jump j$858(x$859)
//│       _ =>
//│         let x$861 = undefined in
//│         jump j$858(x$856)
//│   def j$858(x$845) =
//│     x$845
//│   def entry$863() =
//│     let* (x$862) = f() in
//│     x$862
//│   entry = entry$863
//│ 
//│ Interpreted:
//│ 11

:sllir
:intl
data class A(x)
data class B(y)
fun f(a) =
  let t = if a is
    A(_) then 1
    B(_) then 2
  t
f(A(1))
//│ = 1
//│ LLIR:
//│   class A(x$869)
//│   class B(y$874)
//│   def f$866(a$878) =
//│     case a$878 of
//│       A$867 =>
//│         let x$894 = a$878.<A$867:x> in
//│         let x$895 = 1 in
//│         jump j$893(x$895)
//│       B$872 =>
//│         let x$896 = a$878.<B$872:y> in
//│         let x$897 = 2 in
//│         jump j$893(x$897)
//│       _ =>
//│         panic "match error"
//│   def j$893(tmp$891) =
//│     tmp$891
//│   def entry$900() =
//│     let x$898 = A$867(1) in
//│     let* (x$899) = f(x$898) in
//│     x$899
//│   entry = entry$900
//│ 
//│ Interpreted:
//│ 1

:sllir
:intl
data class A(x)
data class B(y)
fun f(a) =
  let t = if a is
    A(_) then if a is
      A(1) then 1
      B(_) then 2
    B(_) then 3
  t
f(A(1))
//│ = 1
//│ LLIR:
//│   class A(x$906)
//│   class B(y$911)
//│   def f$903(a$915) =
//│     case a$915 of
//│       A$904 =>
//│         let x$935 = a$915.<A$904:x> in
//│         case a$915 of
//│           A$904 =>
//│             let x$937 = a$915.<A$904:x> in
//│             case x$937 of
//│               IntLit(1) =>
//│                 let x$939 = 1 in
//│                 jump j$938(x$939)
//│               _ =>
//│                 panic "match error"
//│           B$909 =>
//│             let x$940 = a$915.<B$909:y> in
//│             let x$941 = 2 in
//│             jump j$936(x$941)
//│           _ =>
//│             panic "match error"
//│       B$909 =>
//│         let x$942 = a$915.<B$909:y> in
//│         let x$943 = 3 in
//│         jump j$934(x$943)
//│       _ =>
//│         panic "match error"
//│   def j$938(tmp$931) =
//│     jump j$936(tmp$931)
//│   def j$936(tmp$931) =
//│     jump j$934(tmp$931)
//│   def j$934(tmp$932) =
//│     tmp$932
//│   def entry$946() =
//│     let x$944 = A$904(1) in
//│     let* (x$945) = f(x$944) in
//│     x$945
//│   entry = entry$946
//│ 
//│ Interpreted:
//│ 1
