:js
:llir
:cpp

:sllir
:intl
fun f1() =
  let x = 1
  let x = 2
  x
f1()
//│ = 2
//│ LLIR:
//│   
//│   def f1$856() =
//│     let x$864 = 1 in
//│     let x$865 = 2 in
//│     x$865
//│   def entry$867() =
//│     let* (x$866) = f1() in
//│     x$866
//│   entry = entry$867
//│ 
//│ Interpreted:
//│ 2

:sllir
:intl
fun f2() =
  let x = 0
  if x == 1 then 2 else 3
f2()
//│ = 3
//│ LLIR:
//│   
//│   def f2$868() =
//│     let x$877 = 0 in
//│     let x$878 = ==(x$877,1) in
//│     case x$878 of
//│       BoolLit(true) =>
//│         2
//│       _ =>
//│         3
//│   def j$879() =
//│     undefined
//│   def entry$881() =
//│     let* (x$880) = f2() in
//│     x$880
//│   entry = entry$881
//│ 
//│ Interpreted:
//│ 3


:sllir
fun f3() =
  let x1 = 0
  let x2 = 1
  if true then x1 else x2
f3()
//│ = 0
//│ LLIR:
//│   
//│   def f3$882() =
//│     let x$891 = 0 in
//│     let x$892 = 1 in
//│     let x$893 = true in
//│     case x$893 of
//│       BoolLit(true) =>
//│         x$891
//│       _ =>
//│         x$892
//│   def j$894() =
//│     undefined
//│   def entry$896() =
//│     let* (x$895) = f3() in
//│     x$895
//│   entry = entry$896


:sllir
:intl
fun f4() =
  let x = 0
  let x = if x == 1 then 2 else 3
  x
f4()
//│ = 3
//│ LLIR:
//│   
//│   def f4$897() =
//│     let x$909 = 0 in
//│     let x$910 = ==(x$909,1) in
//│     case x$910 of
//│       BoolLit(true) =>
//│         let x$912 = 2 in
//│         jump j$911(x$912)
//│       _ =>
//│         let x$913 = 3 in
//│         jump j$911(x$913)
//│   def j$911(tmp$908) =
//│     tmp$908
//│   def entry$915() =
//│     let* (x$914) = f4() in
//│     x$914
//│   entry = entry$915
//│ 
//│ Interpreted:
//│ 3

:sllir
:intl
fun f5() =
  let x = 0
  let x = if x == 1 then 2 else 3
  let x = if x == 2 then 4 else 5
  x
f5()
//│ = 5
//│ LLIR:
//│   
//│   def f5$916() =
//│     let x$933 = 0 in
//│     let x$934 = ==(x$933,1) in
//│     case x$934 of
//│       BoolLit(true) =>
//│         let x$936 = 2 in
//│         jump j$935(x$936)
//│       _ =>
//│         let x$937 = 3 in
//│         jump j$935(x$937)
//│   def j$935(tmp$931) =
//│     let x$938 = ==(tmp$931,2) in
//│     case x$938 of
//│       BoolLit(true) =>
//│         let x$940 = 4 in
//│         jump j$939(x$940)
//│       _ =>
//│         let x$941 = 5 in
//│         jump j$939(x$941)
//│   def j$939(tmp$932) =
//│     tmp$932
//│   def entry$943() =
//│     let* (x$942) = f5() in
//│     x$942
//│   entry = entry$943
//│ 
//│ Interpreted:
//│ 5

:sllir
fun test() =
  if true do test()
//│ LLIR:
//│   
//│   def test$944() =
//│     let x$951 = true in
//│     case x$951 of
//│       BoolLit(true) =>
//│         let* (x$953) = test() in
//│         x$953
//│       _ =>
//│         undefined
//│   def j$952() =
//│     undefined
//│   def entry$954() =
//│     undefined
//│   entry = entry$954

:sllir
fun test() =
  (if true then test()) + 1
//│ LLIR:
//│   
//│   def test$955() =
//│     let x$965 = true in
//│     case x$965 of
//│       BoolLit(true) =>
//│         let* (x$967) = test() in
//│         jump j$966(x$967)
//│       _ =>
//│         panic "match error"
//│   def j$966(tmp$964) =
//│     let x$968 = +(tmp$964,1) in
//│     x$968
//│   def entry$969() =
//│     undefined
//│   entry = entry$969


:sllir
:intl
fun f() =
  let x = 10
  if true do
    set x += 1
  x
f()
//│ = 11
//│ LLIR:
//│   
//│   def f$970() =
//│     let x$983 = 10 in
//│     let x$984 = true in
//│     case x$984 of
//│       BoolLit(true) =>
//│         let x$986 = +(x$983,1) in
//│         let x$987 = undefined in
//│         jump j$985(x$986)
//│       _ =>
//│         let x$988 = undefined in
//│         jump j$985(x$983)
//│   def j$985(x$972) =
//│     x$972
//│   def entry$990() =
//│     let* (x$989) = f() in
//│     x$989
//│   entry = entry$990
//│ 
//│ Interpreted:
//│ 11

:sllir
:intl
data class A(x)
data class B(y)
fun f(a) =
  let t = if a is
    A(_) then 1
    B(_) then 2
  t
f(A(1))
//│ = 1
//│ LLIR:
//│   class A(x$996)
//│   class B(y$1001)
//│   def f$993(a$1005) =
//│     case a$1005 of
//│       A$994 =>
//│         let x$1021 = a$1005.<A$994:x> in
//│         let x$1022 = 1 in
//│         jump j$1020(x$1022)
//│       B$999 =>
//│         let x$1023 = a$1005.<B$999:y> in
//│         let x$1024 = 2 in
//│         jump j$1020(x$1024)
//│       _ =>
//│         panic "match error"
//│   def j$1020(tmp$1018) =
//│     tmp$1018
//│   def entry$1027() =
//│     let x$1025 = A$994(1) in
//│     let* (x$1026) = f(x$1025) in
//│     x$1026
//│   entry = entry$1027
//│ 
//│ Interpreted:
//│ 1

:sllir
:intl
data class A(x)
data class B(y)
fun f(a) =
  let t = if a is
    A(_) then if a is
      A(1) then 1
      B(_) then 2
    B(_) then 3
  t
f(A(1))
//│ = 1
//│ LLIR:
//│   class A(x$1033)
//│   class B(y$1038)
//│   def f$1030(a$1042) =
//│     case a$1042 of
//│       A$1031 =>
//│         let x$1062 = a$1042.<A$1031:x> in
//│         case a$1042 of
//│           A$1031 =>
//│             let x$1064 = a$1042.<A$1031:x> in
//│             case x$1064 of
//│               IntLit(1) =>
//│                 let x$1066 = 1 in
//│                 jump j$1065(x$1066)
//│               _ =>
//│                 panic "match error"
//│           B$1036 =>
//│             let x$1067 = a$1042.<B$1036:y> in
//│             let x$1068 = 2 in
//│             jump j$1063(x$1068)
//│           _ =>
//│             panic "match error"
//│       B$1036 =>
//│         let x$1069 = a$1042.<B$1036:y> in
//│         let x$1070 = 3 in
//│         jump j$1061(x$1070)
//│       _ =>
//│         panic "match error"
//│   def j$1065(tmp$1058) =
//│     jump j$1063(tmp$1058)
//│   def j$1063(tmp$1058) =
//│     jump j$1061(tmp$1058)
//│   def j$1061(tmp$1059) =
//│     tmp$1059
//│   def entry$1073() =
//│     let x$1071 = A$1031(1) in
//│     let* (x$1072) = f(x$1071) in
//│     x$1072
//│   entry = entry$1073
//│ 
//│ Interpreted:
//│ 1
