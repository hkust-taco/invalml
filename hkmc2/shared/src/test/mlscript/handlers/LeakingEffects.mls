:js
:effectHandlers


abstract class Effect[A] with
  fun perform(arg: A): A


let
  xs = []
  count = 0
fun main() =
  handle g = Effect with
    fun perform(arg1)(k1) =
      print("B " + arg1)
      xs.push(k1)
  print(g.perform("a"))
  print("—")
  print(g.perform("b"))
  print("—")
  print(g.perform("c"))
main()
while xs.pop() is
  null then "Done."
  f then
    set count += 1
    f(count)
    print("?")
//│ > B a
//│ > 1
//│ > —
//│ > B b
//│ > ?
//│ count = 1
//│ xs = [[function]]


// g is non-resumptive, which means g.perform("a") does not resume
// hence it should exit the entire handle block with the return value of xs.push(k1)
:expect 1
handle h = Effect with
  fun perform(arg)(k) =
    print("A " + arg)
    let
      xs = []
      count = 0
    handle g = Effect with
      fun perform(arg1)(k1) =
        print("B " + arg + " " + arg1)
        xs.push(k1)
    k(g)
    while xs.pop() is
      null then "Done."
      f then
        set count += 1
        f(count)
let g = h.perform("hi")
print(g.perform("a"))
print("—")
print(g.perform("b"))
print("—")
print(g.perform("c"))
// set g = h.perform("hola")
// g.perform("adios")
//│ > A hi
//│ > B hi a
//│ = 1


