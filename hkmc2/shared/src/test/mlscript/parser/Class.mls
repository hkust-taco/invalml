:parseOnly


:pe
class
//│ ╔══[PARSE ERROR] Expected expression after type declaration keyword; found end of input instead
//│ ║  l.5: 	class
//│ ╙──     	     ^
//│ Parsed:
//│ 	Error()

class Foo
//│ Parsed:
//│ 	TypeDef(Cls,Ident(Foo),None)

:pe
class Foo extends
//│ ╔══[PARSE ERROR] Expected start of expression in this position; found end of input instead
//│ ║  l.17: 	class Foo extends
//│ ╙──      	                 ^
//│ Parsed:
//│ 	TypeDef(Cls,InfixApp(Ident(Foo),keyword 'extends',Error()),None)

class Foo extends Bar
//│ Parsed:
//│ 	TypeDef(Cls,InfixApp(Ident(Foo),keyword 'extends',Ident(Bar)),None)

:pe
class Foo extends Bar with
//│ ╔══[PARSE ERROR] Expected start of expression in this position; found end of input instead
//│ ║  l.29: 	class Foo extends Bar with
//│ ╙──      	                          ^
//│ Parsed:
//│ 	TypeDef(Cls,InfixApp(InfixApp(Ident(Foo),keyword 'extends',Ident(Bar)),keyword 'with',Error()),None)

class Foo extends Bar with val x
//│ Parsed:
//│ 	TypeDef(Cls,InfixApp(InfixApp(Ident(Foo),keyword 'extends',Ident(Bar)),keyword 'with',TermDef(ImmutVal,Ident(x),None)),None)

class Foo extends Bar with
  val x: Int
//│ Parsed:
//│ 	TypeDef(Cls,InfixApp(InfixApp(Ident(Foo),keyword 'extends',Ident(Bar)),keyword 'with',Block(List(TermDef(ImmutVal,InfixApp(Ident(x),keyword ':',Ident(Int)),None)))),None)

class Foo with
  val x: Int
//│ Parsed:
//│ 	TypeDef(Cls,InfixApp(Ident(Foo),keyword 'with',Block(List(TermDef(ImmutVal,InfixApp(Ident(x),keyword ':',Ident(Int)),None)))),None)


:pe
with
//│ ╔══[PARSE ERROR] Expected start of expression in this position; found 'with' keyword instead
//│ ║  l.52: 	with
//│ ╙──      	^^^^
//│ Parsed:
//│ 	Error()


class
  Foo
//│ Parsed:
//│ 	TypeDef(Cls,Ident(Foo),None)

class
  Foo
  Bar
//│ Parsed:
//│ 	TypeDef(Cls,Ident(Foo),None)
//│ 	TypeDef(Cls,Ident(Bar),None)

class
  Foo extends Bar
  Bar with
    x
//│ Parsed:
//│ 	TypeDef(Cls,InfixApp(Ident(Foo),keyword 'extends',Ident(Bar)),None)
//│ 	TypeDef(Cls,InfixApp(Ident(Bar),keyword 'with',Block(List(Ident(x)))),None)


:pe
class
Foo
//│ ╔══[PARSE ERROR] Expected expression after type declaration keyword; found new line instead
//│ ║  l.82: 	class
//│ ║        	     ^
//│ ║  l.83: 	Foo
//│ ╙──      	
//│ Parsed:
//│ 	Error()
//│ 	Ident(Foo)

:fixme
class
  Foo
extends Bar
//│ ╔══[PARSE ERROR] Expected start of expression in this position; found 'extends' keyword instead
//│ ║  l.96: 	extends Bar
//│ ╙──      	^^^^^^^
//│ ╔══[PARSE ERROR] Expected end of input; found identifier instead
//│ ║  l.96: 	extends Bar
//│ ╙──      	        ^^^
//│ Parsed:
//│ 	TypeDef(Cls,Ident(Foo),None)
//│ 	Error()

class
  Foo
  extends Bar
//│ Parsed:
//│ 	TypeDef(Cls,InfixApp(Ident(Foo),keyword 'extends',Ident(Bar)),None)

class
  Foo
  extends Bar
  Bar
  extends Baz
//│ Parsed:
//│ 	TypeDef(Cls,InfixApp(Ident(Foo),keyword 'extends',Ident(Bar)),None)
//│ 	TypeDef(Cls,InfixApp(Ident(Bar),keyword 'extends',Ident(Baz)),None)

class Foo
extends Bar
//│ Parsed:
//│ 	TypeDef(Cls,InfixApp(Ident(Foo),keyword 'extends',Ident(Bar)),None)

class Foo
extends
  Bar
//│ Parsed:
//│ 	TypeDef(Cls,InfixApp(Ident(Foo),keyword 'extends',Block(List(Ident(Bar)))),None)


