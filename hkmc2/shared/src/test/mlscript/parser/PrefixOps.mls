:js


+2
//│ = 2

2 + +3
//│ = 5

2 + -3
//│ = -1

:w
:sjs
1
+ 2
+ 3
//│ ╔══[WARNING] Pure expression in statement position
//│ ║  l.15: 	1
//│ ╙──      	^
//│ JS (unsanitized):
//│ let tmp2; tmp2 = + 2; + 3
//│ ╔══[WARNING] Pure expression in statement position
//│ ║  l.15: 	1
//│ ╙──      	^
//│ = 3

:w
:pe
1
* 2
* 3
//│ ╔══[PARSE ERROR] Expected end of input; found literal instead
//│ ║  l.31: 	* 2
//│ ╙──      	  ^
//│ ╔══[WARNING] Pure expression in statement position
//│ ║  l.30: 	1
//│ ╙──      	^
//│ = [function]


:sjs
+
//│ JS (unsanitized):
//│ let lambda1; lambda1 = (undefined, function (arg1, arg2) { return arg1 + arg2 }); lambda1
//│ = [function]

*
//│ = [function]

:w
:pt
1
*
//│ Parsed tree:
//│ IntLit of 1
//│ Ident of "*"
//│ ╔══[WARNING] Pure expression in statement position
//│ ║  l.53: 	1
//│ ╙──      	^
//│ = [function]


fun (??) foo(x, y) = x + y

??
//│ = [function foo]

(??)
//│ = [function foo]

??(1, 2)
//│ = 3

?? of 1, 2
//│ = 3

1 ??(2)
//│ = 3

1 ?? 2
//│ = 3

// `??` is not in the list of prefix operators...
:pe
?? 1
//│ ╔══[PARSE ERROR] Expected end of input; found literal instead
//│ ║  l.86: 	?? 1
//│ ╙──      	   ^
//│ = [function foo]

:w
:pe
1
?? 2
//│ ╔══[PARSE ERROR] Expected end of input; found literal instead
//│ ║  l.95: 	?? 2
//│ ╙──      	   ^
//│ ╔══[WARNING] Pure expression in statement position
//│ ║  l.94: 	1
//│ ╙──      	^
//│ = [function foo]

1
  ?? 2
//│ = 3


