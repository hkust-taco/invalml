:js


+2
//│ = 2

2 + +3
//│ = 5

2 + -3
//│ = -1

// * `+` is a prefix op; needs a space if we want to use it as a binary op in new-line position
:w
:sjs
1
+2
+3
//│ ╔══[WARNING] Pure expression in statement position
//│ ║  l.16: 	1
//│ ╙──      	^
//│ JS (unsanitized):
//│ let tmp2; tmp2 = + 2; + 3
//│ ╔══[WARNING] Pure expression in statement position
//│ ║  l.16: 	1
//│ ╙──      	^
//│ = 3

:sjs
1
+ 2
+ 3
//│ JS (unsanitized):
//│ let tmp3; tmp3 = 1 + 2; tmp3 + 3
//│ = 6

1
* 2
* 3
//│ = 6

1
*2
*3
//│ = 6


:sjs
+
//│ JS (unsanitized):
//│ let lambda; lambda = (undefined, function (arg1, arg2) { return arg1 + arg2 }); lambda
//│ = [function]

*
//│ = [function]

:pe
1
*
//│ ╔══[PARSE ERROR] Expected start of expression in this position; found end of input instead
//│ ║  l.59: 	*
//│ ╙──      	 ^


fun (??) foo(x, y) = x + y

??
//│ = [function foo]

(??)
//│ = [function foo]

??(1, 2)
//│ = 3

?? of 1, 2
//│ = 3

1 ??(2)
//│ = 3

1 ?? 2
//│ = 3

// `??` is not in the list of prefix operators...
:pe
?? 1
//│ ╔══[PARSE ERROR] Expected end of input; found literal instead
//│ ║  l.87: 	?? 1
//│ ╙──      	   ^
//│ = [function foo]

1
?? 2
//│ = 3

1
  ?? 2
//│ = 3


