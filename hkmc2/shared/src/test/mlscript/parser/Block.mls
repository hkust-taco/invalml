:parseOnly


a
//│ Parsed:
//│ 	Ident(a)

a,
//│ Parsed:
//│ 	Ident(a)

a, b
//│ Parsed:
//│ 	Ident(a)
//│ 	Ident(b)

a, b, c
//│ Parsed:
//│ 	Ident(a)
//│ 	Ident(b)
//│ 	Ident(c)


class A, res
//│ Parsed:
//│ 	TypeDef(Cls,Ident(A),None)
//│ 	Ident(res)


foo of
  a,
  b
//│ Parsed:
//│ 	App(Ident(foo),Tup(List(Ident(a), Ident(b))))

foo of
  a
  b
//│ Parsed:
//│ 	App(Ident(foo),Tup(List(Ident(a), Ident(b))))


x => x
//│ Parsed:
//│ 	InfixApp(Tup(List(Ident(x))),keyword '=>',Ident(x))

x =>
  x
//│ Parsed:
//│ 	InfixApp(Tup(List(Ident(x))),keyword '=>',Block(List(Ident(x))))

x =>
  foo
  x
//│ Parsed:
//│ 	InfixApp(Tup(List(Ident(x))),keyword '=>',Block(List(Ident(foo), Ident(x))))


let a = 1, 2
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(a),Some(IntLit(1)),None)
//│ 	IntLit(2)

let a = (1, 2)
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(a),Some(Bra(Round,Block(List(IntLit(1), IntLit(2))))),None)

let a = { 1, 2 }
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(a),Some(Block(List(IntLit(1), IntLit(2)))),None)

let a = 1 in 2
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(a),Some(IntLit(1)),Some(IntLit(2)))

let a = 1 in 2, 3
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(a),Some(IntLit(1)),Some(IntLit(2)))
//│ 	IntLit(3)

let a = 1 in (2, 3)
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(a),Some(IntLit(1)),Some(Bra(Round,Block(List(IntLit(2), IntLit(3))))))

let a = 1 in { 2, 3 }
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(a),Some(IntLit(1)),Some(Block(List(IntLit(2), IntLit(3)))))


foo a
//│ Parsed:
//│ 	Jux(Ident(foo),Ident(a))

foo
  a
//│ Parsed:
//│ 	Jux(Ident(foo),Block(List(Ident(a))))

foo
  a
  b
//│ Parsed:
//│ 	Jux(Ident(foo),Block(List(Ident(a), Ident(b))))

foo
  a,
  b
//│ Parsed:
//│ 	Jux(Ident(foo),Block(List(Ident(a), Ident(b))))



// --- ERROR CASES ---

:global
:pe



