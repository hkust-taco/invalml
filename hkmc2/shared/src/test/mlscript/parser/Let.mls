:parseOnly


:pe
let
//│ ╔══[PARSE ERROR] Expected expression after 'let' binding keyword; found end of input instead
//│ ║  l.5: 	let
//│ ╙──     	   ^
//│ Parsed:
//│ 	Error()

let x
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(x),None,None)

:pe
let x =
//│ ╔══[PARSE ERROR] Expected expression or block after 'let' binding equals sign; found end of input instead
//│ ║  l.17: 	let x =
//│ ╙──      	       ^
//│ Parsed:
//│ 	Error()

let x = y
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(x),Some(Ident(y)),None)

let x =
  y
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(x),Some(Block(List(Ident(y)))),None)

:pe
let x = y in
//│ ╔══[PARSE ERROR] Expected expression or block after 'let' binding `in` clause; found end of input instead
//│ ║  l.34: 	let x = y in
//│ ╙──      	            ^
//│ Parsed:
//│ 	Error()

let x = y in z
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(x),Some(Ident(y)),Some(Ident(z)))

:pe
let x = y class
//│ ╔══[PARSE ERROR] Expected end of input; found 'class' keyword instead
//│ ║  l.46: 	let x = y class
//│ ╙──      	          ^^^^^
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(x),Some(Ident(y)),None)

let x
  = 1
//│ Parsed:
//│ 	LetLike(keyword 'let',App(Ident(x),OpBlock(List((Ident(=),IntLit(1))))),None,None)

let x
= 1
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(x),Some(IntLit(1)),None)

:pe
let x
=
1
//│ ╔══[PARSE ERROR] Expected expression or block after 'let' binding equals sign; found new line instead
//│ ║  l.65: 	=
//│ ║        	 ^
//│ ║  l.66: 	1
//│ ╙──      	
//│ Parsed:
//│ 	Error()
//│ 	IntLit(1)


:pe
let {}
//│ ╔══[PARSE ERROR] Expected expression after 'let' binding keyword; found end of block instead
//│ ║  l.78: 	let {}
//│ ╙──      	    ^^
//│ Parsed:

let ()
//│ Parsed:
//│ 	LetLike(keyword 'let',Unt(),None,None)

:pe
let // a
//│ ╔══[PARSE ERROR] Expected expression after 'let' binding keyword; found end of input instead
//│ ║  l.89: 	let // a
//│ ╙──      	        ^
//│ Parsed:
//│ 	Error()

:pe
let
  // a
//│ ╔══[PARSE ERROR] Expected expression after 'let' binding keyword; found end of block instead
//│ ║  l.98: 	  // a
//│ ╙──      	^^
//│ Parsed:

:pe
let
  // a
1
//│ ╔══[PARSE ERROR] Expected expression after 'let' binding keyword; found end of block instead
//│ ║  l.106: 	  // a
//│ ║         	^^^^^^
//│ ║  l.107: 	1
//│ ╙──       	^
//│ Parsed:
//│ 	IntLit(1)



let x = y
foo
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(x),Some(Ident(y)),None)
//│ 	Ident(foo)


let
  x
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(x),None,None)

let
  x
  y
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(x),None,None)
//│ 	LetLike(keyword 'let',Ident(y),None,None)

let
  x, y
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(x),None,None)
//│ 	LetLike(keyword 'let',Ident(y),None,None)

let
  x = 1
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(x),Some(IntLit(1)),None)

let
  x = 1 in x
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(x),Some(IntLit(1)),Some(Ident(x)))

let
  x = 1
  in x
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(x),Some(IntLit(1)),Some(Ident(x)))

let x = 1
in x
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(x),Some(IntLit(1)),Some(Ident(x)))

let x = 1
  in x
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(x),Some(IntLit(1)),Some(Ident(x)))

// Awkward... parses `in x` as a separate statement
let
  x = 1
in x
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(x),Some(IntLit(1)),None)
//│ 	Modified(keyword 'in',None,Ident(x))

:pe
let
x = 1
in x
//│ ╔══[PARSE ERROR] Expected expression after 'let' binding keyword; found new line instead
//│ ║  l.178: 	let
//│ ║         	   ^
//│ ║  l.179: 	x = 1
//│ ╙──       	
//│ Parsed:
//│ 	Error()
//│ 	Def(Ident(x),IntLit(1))
//│ 	Modified(keyword 'in',None,Ident(x))


let a in b
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(a),None,Some(Ident(b)))

let a = 1 in b
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(a),Some(IntLit(1)),Some(Ident(b)))


:pe
let
  with
//│ ╔══[PARSE ERROR] Expected expression after 'let' binding keyword; found 'with' keyword instead
//│ ║  l.203: 	  with
//│ ╙──       	  ^^^^
//│ Parsed:
//│ 	Error()


let x = 1 in
  x
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(x),Some(IntLit(1)),Some(Block(List(Ident(x)))))

let x = 1 in
  x
  y
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(x),Some(IntLit(1)),Some(Block(List(Ident(x), Ident(y)))))

x => let x = 1 in x
//│ Parsed:
//│ 	InfixApp(Tup(List(Ident(x))),keyword '=>',LetLike(keyword 'let',Ident(x),Some(IntLit(1)),Some(Ident(x))))

x => let x = 1 in
  x
//│ Parsed:
//│ 	InfixApp(Tup(List(Ident(x))),keyword '=>',LetLike(keyword 'let',Ident(x),Some(IntLit(1)),Some(Block(List(Ident(x))))))

x => let x = 1
  in x
//│ Parsed:
//│ 	InfixApp(Tup(List(Ident(x))),keyword '=>',LetLike(keyword 'let',Ident(x),Some(IntLit(1)),Some(Ident(x))))

x =>
  let x = 1
  in x
//│ Parsed:
//│ 	InfixApp(Tup(List(Ident(x))),keyword '=>',Block(List(LetLike(keyword 'let',Ident(x),Some(IntLit(1)),Some(Ident(x))))))

x =>
  let x = 1
  x
//│ Parsed:
//│ 	InfixApp(Tup(List(Ident(x))),keyword '=>',Block(List(LetLike(keyword 'let',Ident(x),Some(IntLit(1)),None), Ident(x))))

x => let x = 1
  x
//│ Parsed:
//│ 	InfixApp(Tup(List(Ident(x))),keyword '=>',LetLike(keyword 'let',Ident(x),Some(Jux(IntLit(1),Block(List(Ident(x))))),None))


:pe
if
//│ ╔══[PARSE ERROR] Expected expression or block after 'if' keyword; found end of input instead
//│ ║  l.255: 	if
//│ ╙──       	  ^
//│ Parsed:
//│ 	Error()






