:parseOnly


+
//│ Parsed:
//│ 	Ident(+)

+1
//│ Parsed:
//│ 	App(Ident(+),Tup(List(IntLit(1))))

1 + 2
//│ Parsed:
//│ 	OpApp(IntLit(1),Ident(+),List(IntLit(2)))

1 + +2
//│ Parsed:
//│ 	OpApp(IntLit(1),Ident(+),List(App(Ident(+),Tup(List(IntLit(2))))))

+1 + +2
//│ Parsed:
//│ 	OpApp(App(Ident(+),Tup(List(IntLit(1)))),Ident(+),List(App(Ident(+),Tup(List(IntLit(2))))))

+ + 1 + + + 2
//│ Parsed:
//│ 	OpApp(App(Ident(+),Tup(List(App(Ident(+),Tup(List(IntLit(1))))))),Ident(+),List(App(Ident(+),Tup(List(App(Ident(+),Tup(List(IntLit(2)))))))))

1 + 2 * 3
//│ Parsed:
//│ 	OpApp(IntLit(1),Ident(+),List(OpApp(IntLit(2),Ident(*),List(IntLit(3)))))

1 + 2 * 3 - 4
//│ Parsed:
//│ 	OpApp(OpApp(IntLit(1),Ident(+),List(OpApp(IntLit(2),Ident(*),List(IntLit(3))))),Ident(-),List(IntLit(4)))

1 => 2
//│ Parsed:
//│ 	InfixApp(Tup(List(IntLit(1))),keyword '=>',IntLit(2))

1 =>
  2
//│ Parsed:
//│ 	InfixApp(Tup(List(IntLit(1))),keyword '=>',Block(List(IntLit(2))))

x =>
  1
  2
//│ Parsed:
//│ 	InfixApp(Tup(List(Ident(x))),keyword '=>',Block(List(IntLit(1), IntLit(2))))

x => x : t
//│ Parsed:
//│ 	InfixApp(Tup(List(Ident(x))),keyword '=>',InfixApp(Ident(x),keyword ':',Ident(t)))

x =>
  x : t
//│ Parsed:
//│ 	InfixApp(Tup(List(Ident(x))),keyword '=>',Block(List(InfixApp(Ident(x),keyword ':',Ident(t)))))


1 +
 2
//│ Parsed:
//│ 	OpApp(IntLit(1),Ident(+),List(Block(List(IntLit(2)))))


:pt
1 +
2 +
3
//│ Parsed tree:
//│ OpApp:
//│   lhs = OpApp:
//│     lhs = IntLit of 1
//│     op = Ident of "+"
//│     rhss = Ls of 
//│       IntLit of 2
//│   op = Ident of "+"
//│   rhss = Ls of 
//│     IntLit of 3

1 +
 let x = 2
 class A
 x
 42
//│ Parsed:
//│ 	OpApp(IntLit(1),Ident(+),List(Block(List(LetLike(keyword 'let',Ident(x),Some(IntLit(2)),None), TypeDef(Cls,Ident(A),None,None), Ident(x), IntLit(42)))))

:pe
1 +
 2,
 3
//│ ╔══[PARSE ERROR] Unexpected comma in this position
//│ ║  l.92: 	 2,
//│ ╙──      	  ^
//│ Parsed:
//│ 	OpApp(IntLit(1),Ident(+),List(Block(List(IntLit(2), IntLit(3)))))


a === "a" || b === "b"
//│ Parsed:
//│ 	OpApp(OpApp(Ident(a),Ident(===),List(StrLit(a))),Ident(||),List(OpApp(Ident(b),Ident(===),List(StrLit(b)))))


