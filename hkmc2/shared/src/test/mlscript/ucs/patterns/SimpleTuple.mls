:js

// We test the support for simple tuple patterns in this file.
// Splice tuple patterns will be implement in the future.

fun sum(x, y) = x + y
sum(1, 2)
//│ = 3

:fixme
fun sum([x, y]) = x + y
sum([1, 2])
//│ /!!!\ Uncaught error: scala.MatchError: Tup(List(Ident(x), Ident(y))) (of class hkmc2.syntax.Tree$Tup)

fun sum(pair) =
  if pair is [x, y] then x + y
sum([1, 2])
//│ = 3

fun test(thing) =
  if thing is [] then 0

:re
test("")
//│ ═══[RUNTIME ERROR] Error: match error

:re
test(12)
//│ ═══[RUNTIME ERROR] Error: match error

data class Point(x: Int, y: Int)

fun with_other_constructors(thing) =
  if thing is
    [x, y] then x * y
    Point(x, y) then x + y

:expect 7
with_other_constructors(Point(3, 4))
//│ = 7

:expect 12
with_other_constructors([3, 4])
//│ = 12

// A workaround is to move the tuple pattern to the last case.
fun with_other_constructors(thing) =
  if thing is
    Point(x, y) then x + y
    [x, y] then x * y

:expect 7
with_other_constructors(Point(3, 4))
//│ = 7

:expect 12
with_other_constructors([3, 4])
//│ = 12


fun with_else(x) =
  if x is
    [a, b, c] then
      a + b + c
    else
      0

with_else([1, 2, 3])
//│ = 6

with_else([1, 2])
//│ = 0

fun match_against_different_length(xs) =
  if xs is
    [] then 0
    [x] then x + 1
    [x, y] then x + y + 2
    [x, y, z] then x + y + z + 3

:expect 0
match_against_different_length([])
//│ = 0

:expect 18
match_against_different_length([17])
//│ = 18

:expect 22
match_against_different_length([9, 11])
//│ = 22

:expect 42
match_against_different_length([13, 13, 13])
//│ = 42

import "../../../mlscript-compile/Option.mls"

open Option

fun with_the_common_prefix(xs) =
  if xs is
    [Some(x)] then x + 1
    [None] then 0
