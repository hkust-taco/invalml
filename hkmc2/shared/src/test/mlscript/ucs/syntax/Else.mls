:js

// Else.mls
// ========
// Examine how the `else` keyword is parsed.


fun f(x, y, z) = if x then y

:pt
fun f(x, y, z) = if x then y else z
//│ Parsed tree:
//│ TermDef:
//│   k = Fun
//│   head = App:
//│     lhs = Ident of "f"
//│     rhs = Tup of Ls of 
//│       Ident of "x"
//│       Ident of "y"
//│       Ident of "z"
//│   rhs = S of IfLike:
//│     kw = keyword 'if'
//│     kwLoc = N
//│     split = Block of Ls of 
//│       InfixApp:
//│         lhs = Ident of "x"
//│         kw = keyword 'then'
//│         rhs = Ident of "y"
//│       Modified:
//│         modifier = keyword 'else'
//│         modLoc = N
//│         body = Ident of "z"


fun f(x, y, z) =
  if x
    then y
    else z

fun f(x, y, z) = if x
                 then y
                 else z

fun f(x, y, z) = if x then y
  else z

fun f(x, y, z) = if
  x then y
  else z

fun f(x, y, z) =
  if x then
    y
  else
    z

fun f(x, y, z) =
  if x then y
  else z

fun f(x, y, z) =
  if x then y
    else z

fun f(x, y, z) =
  if x
  then y
  else z

fun f(x, y, z) =
  if x
    then y
    else z

:fixme
fun f(x, y, z) =
  if
    x then y else z
//│ ╔══[PARSE ERROR] Unexpected 'else' keyword here
//│ ║  l.78: 	    x then y else z
//│ ╙──      	             ^^^^


fun f(x, y) =
  if x
    then y

let audits = new Set()
//│ audits = Set{}

if audits.has(1) === true do
  print("ok")
else
  1
//│ = 1


(if true then
    5
  else 1
) + 3
//│ = 8

:fixme
(if true
  then
    5
  else 1
) + 3
//│ ╔══[PARSE ERROR] Unexpected 'else' keyword here
//│ ║  l.108: 	  else 1
//│ ╙──       	  ^^^^
//│ = 8

:fixme
(if true
  then
    5 else 1
) + 3
//│ ╔══[PARSE ERROR] Unexpected 'else' keyword here
//│ ║  l.118: 	    5 else 1
//│ ╙──       	      ^^^^
//│ = 8
