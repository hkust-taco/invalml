:js


let x = 1
//│ x = 1


if x is
  0 then "zero"
  1 then "one"
//│ = "one"

if x >
  0 then true
//│ = true

if x >
  1 then true
  0 then false
//│ = false


// * This is an error because the two split branches would bind differently to the common prefix
:pe
:e
if 1 + 2
  * 3 then 0
  + 4 then 0
//│ ╔══[PARSE ERROR] Operator cannot be used inside this operator split
//│ ║  l.28: 	  + 4 then 0
//│ ║        	  ^
//│ ╟── as it has lower precedence than the splitting operator here
//│ ║  l.27: 	  * 3 then 0
//│ ╙──      	  ^
//│ ╔══[PARSE ERROR] Unexpected 'then' keyword in this operator split inner position
//│ ║  l.28: 	  + 4 then 0
//│ ║        	      ^^^^
//│ ╟── Note: the operator split starts here
//│ ║  l.27: 	  * 3 then 0
//│ ╙──      	  ^
//│ ╔══[ERROR] Unexpected infix use of 'then' keyword here
//│ ║  l.26: 	if 1 + 2
//│ ║        	       ^
//│ ║  l.27: 	  * 3 then 0
//│ ║        	^^^^^^^^^^^^
//│ ║  l.28: 	  + 4 then 0
//│ ╙──      	^^^^^

if 1 + 2
  * 3 then 0
  * 4 then 1
  else 2
//│ = 2


if (1 + 2)
  * 3 === 12 then 0
  * 4 === 12 then 1
//│ = 1

if (1 + 2)
  * 3 === 7 then 0
  + 4 === 7 then 1
//│ = 1


:pe
:e
if 1 + 2
  * 3 then 0
  then 0
//│ ╔══[PARSE ERROR] Unexpected 'then' keyword in this operator split inner position
//│ ║  l.71: 	  then 0
//│ ║        	  ^^^^
//│ ╟── Note: the operator split starts here
//│ ║  l.70: 	  * 3 then 0
//│ ╙──      	  ^
//│ ╔══[ERROR] Unexpected infix use of 'then' keyword here
//│ ║  l.69: 	if 1 + 2
//│ ║        	       ^
//│ ║  l.70: 	  * 3 then 0
//│ ╙──      	^^^^^^^^^^^^


if x
  > 1 then true
  == 1 then false
//│ = false


