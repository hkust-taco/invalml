

fun f: Any -> Bool
fun g: Any -> Bool
fun h: Any -> Bool

data class Pair[A, B](fst: A, snd: B)


Pair(0, 1) is Pair

Pair(0, 1) is Pair(a, b)

Pair(0, 1) is Pair(0, _)

if Pair(0, 1) is Pair(a, b) then true else false


fun foo(x) = x is Pair(a, b)


Pair(0, 1) is Pair(a, b) and a > b

if Pair(0, 1) is Pair(a, b) then a > b else false


fun foo(x) = x is Pair(a, b) and a > b

fun foo(x) = if x is Pair(a, b) then a > b else false

fun foo(x) = f(x) and g(x) and h(x)

:e
fun foo(x) = x is
  Pair
  Int
//│ ╔══[ERROR] only one pattern is supported in shorthands
//│ ║  l.35: 	  Pair
//│ ║        	  ^^^^
//│ ║  l.36: 	  Int
//│ ╙──      	^^^^^

:e
fun foo(x) = x is
  Pair(a, b) and a > b
  Int
//│ ╔══[ERROR] only one pattern is supported in shorthands
//│ ║  l.45: 	  Pair(a, b) and a > b
//│ ║        	  ^^^^^^^^^^^^^^^^^^^^
//│ ║  l.46: 	  Int
//│ ╙──      	^^^^^

:todo // support `|`
fun foo(x) = x is Pair(a, b) | Int
//│ ╔══[ERROR] Name not found: |
//│ ║  l.54: 	fun foo(x) = x is Pair(a, b) | Int
//│ ╙──      	                             ^
//│ ╔══[ERROR] Cannot use this identifier as an extractor
//│ ║  l.54: 	fun foo(x) = x is Pair(a, b) | Int
//│ ╙──      	                             ^

:todo
fun foo(x) = x is (Pair(a, b) and a > b) | Int
//│ ╔══[ERROR] Name not found: |
//│ ║  l.63: 	fun foo(x) = x is (Pair(a, b) and a > b) | Int
//│ ╙──      	                                         ^
//│ ╔══[ERROR] Cannot use this identifier as an extractor
//│ ║  l.63: 	fun foo(x) = x is (Pair(a, b) and a > b) | Int
//│ ╙──      	                                         ^



data class A[T](arg: T)


x => (x is A(_))



