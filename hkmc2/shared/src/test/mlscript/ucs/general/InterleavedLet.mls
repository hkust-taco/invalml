

abstract class List[out T]
data class Cons[out T](head: T, tail: List[T]) extends List[T]
object Nil extends List[Nothing]


fun map(f, xs) = if xs is
  Nil then Nil
  let xs' = map(f, xs)
  Cons(x, xs) then Cons(f(x), xs')


object Bot


abstract class Option[T]
data class Some[T](value: T) extends Option[T]
object None extends Option[Nothing]


fun normalize(tp) = ()
fun glb(tp1, tp2) = ()


// TODO: `as` keyword 
fun merge(tp1, tp2) = if
  let tp1_n = normalize(tp1)
  tp1_n is Bot then Bot
  let tp2_n = normalize(tp2)
  tp2_n is Bot then Bot
  let m = merge(tp1_n, tp2_n)
  m is Some(tp) then tp
  m is None     then glb(tp1_n, tp2_n)


