:js

import "../../../mlscript-compile/Str.mls"
import "../../../mlscript-compile/Option.mls"

open Option
open Str

abstract class EitherOrBoth[out A, out B]: (Left[A, B] | Right[A, B] | Both[A, B])
data class Left[out A, out B](value: A) extends EitherOrBoth[A, B]
data class Right[out A, out B](value: B) extends EitherOrBoth[A, B]
data class Both[out A, out B](left: A, right: B) extends EitherOrBoth[A, B] 

type Either[A, B] = Left[A, B] | Right[A, B]

// TODO: fix type parameters of Option. See mlscript-compile/Option.mls
:todo
fun getLeft[A, B](eob: EitherOrBoth[A, B]): Option[A] =
  if eob is
    Left(left) then Some(left)
    Right(_) then None
    Both(left, _) then Some(left)
//│ ╔══[ERROR] Wrong number of type arguments
//│ ║  l.18: 	fun getLeft[A, B](eob: EitherOrBoth[A, B]): Option[A] =
//│ ╙──      	                                            ^^^^^^^^
//│ ╔══[ERROR] Unexpected moduleful type application.
//│ ║  l.18: 	fun getLeft[A, B](eob: EitherOrBoth[A, B]): Option[A] =
//│ ║        	                                            ^^^^^^^^
//│ ╙── Function must be marked as returning a 'module' in order to have a module return type.

// TODO: fix type parameters of Option. See mlscript-compile/Option.mls
:todo
fun getRight[A, B](eob: EitherOrBoth[A, B]): Option[B] =
  if eob is
    Left(_) then None
    Right(right) then Some(right)
    Both(_, right) then Some(right)
//│ ╔══[ERROR] Wrong number of type arguments
//│ ║  l.33: 	fun getRight[A, B](eob: EitherOrBoth[A, B]): Option[B] =
//│ ╙──      	                                             ^^^^^^^^
//│ ╔══[ERROR] Unexpected moduleful type application.
//│ ║  l.33: 	fun getRight[A, B](eob: EitherOrBoth[A, B]): Option[B] =
//│ ║        	                                             ^^^^^^^^
//│ ╙── Function must be marked as returning a 'module' in order to have a module return type.

// TODO: fix type parameters of Option. See mlscript-compile/Option.mls
:todo
fun getBoth[A, B](eob: EitherOrBoth[A, B]): Option[[A, B]] =
  if eob is
    Left(_) then None
    Right(_) then None
    Both(left, right) then Some([left, right])
//│ ╔══[ERROR] Wrong number of type arguments
//│ ║  l.48: 	fun getBoth[A, B](eob: EitherOrBoth[A, B]): Option[[A, B]] =
//│ ╙──      	                                            ^^^^^^^^^^^^^
//│ ╔══[ERROR] Unexpected moduleful type application.
//│ ║  l.48: 	fun getBoth[A, B](eob: EitherOrBoth[A, B]): Option[[A, B]] =
//│ ║        	                                            ^^^^^^^^^^^^^
//│ ╙── Function must be marked as returning a 'module' in order to have a module return type.

fun mapLeft[A, B, C](eob: EitherOrBoth[A, B], f: A -> C): EitherOrBoth[C, B] =
  if eob is
    Left(left) then Left(f(left))
    Right(right) then Right(right)
    Both(left, right) then Both(f(left), right)

fun mapRight[A, B, C](eob: EitherOrBoth[A, B], f: B -> C): EitherOrBoth[A, C] =
  if eob is
    Left(left) then Left(left)
    Right(right) then Right(f(right))
    Both(left, right) then Both(left, f(right))

fun map[A, B, C, D](eob: EitherOrBoth[A, B], f: A -> C, g: B -> D): EitherOrBoth[C, D] =
  if eob is
    Left(left) then Left(f(left))
    Right(right) then Right(g(right))
    Both(left, right) then Both(f(left), g(right))

fun fold[A, B, C](eob: EitherOrBoth[A, B], f: A -> C, g: B -> C, h: [A, B] -> C): C =
  if eob is
    Left(left) then f(left)
    Right(right) then g(right)
    Both(left, right) then h(left, right)

fun isLeft[A, B](eob: EitherOrBoth[A, B]): Bool =
  if eob is
    Left(_) then true
    Right(_) then false
    Both(_, _) then false

fun isRight[A, B](eob: EitherOrBoth[A, B]): Bool =
  if eob is
    Left(_) then false
    Right(_) then true
    Both(_, _) then false

fun isBoth[A, B](eob: EitherOrBoth[A, B]): Bool =
  if eob is
    Left(_) then false
    Right(_) then false
    Both(_, _) then true

fun eobToString[A, B](eob: EitherOrBoth[A, B]): Str =
  if eob is
    Left(left) then "Left(" ~ Str.from(left) ~ ")"
    Right(right) then "Right(" ~ Str.from(right) ~ ")"
    Both(left, right) then "Both(" ~ Str.from(left) ~ ", " ~ Str.from(right) ~ ")"
