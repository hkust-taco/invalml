:js
import "../../../mlscript-compile/Stack.mls"
import "../../../mlscript-compile/Iter.mls"
import "../../../mlscript-compile/Str.mls"

open Stack

fun showList(xs) = "[" + xs Iter.fromStack() Iter.joined(", ") + "]"

fun foldLeft(f)(z) =
  fun aux(acc, xs) =
    if xs is
      Nil then acc
      Cons(x, xs') then aux(f(acc, x), xs')
  (xs) => aux(z, xs)

fun showLists(xs) = print of
  "[\n" + xs Iter.fromStack() Iter.mapping(showList) Iter.mapping(s => "  " + s) Iter.joined(",\n") + "\n]"

fun (~>..) insertAllPositions(z, xs) =
  fun go(prev, lists, next) =
    if next is
      Nil then ((prev :+ z) :: lists) |> reverse
      head :: tail then
        let nu = ((prev :+ z) ::: next)
        go(prev :+ head, nu :: lists, tail)
  go(Nil, Nil, xs)

0 ~>.. (1 :: 2 :: 3 :: Nil) |> showLists
//│ > [
//│ >   [0, 1, 2, 3],
//│ >   [1, 0, 2, 3],
//│ >   [1, 2, 0, 3],
//│ >   [1, 2, 3, 0]
//│ > ]

fun permutations(xs) =
  if xs is
    Nil then Nil
    x :: Nil then (x :: Nil) :: Nil
    x :: xs' then permutations(xs')
      Iter.fromStack()
      Iter.folded of Nil, (acc, ys) => acc ::: (x ~>.. ys)

permutations(Nil) |> showLists
//│ > [
//│ > 
//│ > ]

permutations(1 :: Nil) |> showLists
//│ > [
//│ >   [1]
//│ > ]

permutations(1 :: 2 :: Nil) |> showLists
//│ > [
//│ >   [1, 2],
//│ >   [2, 1]
//│ > ]

permutations(1 :: 2 :: 3 :: Nil) |> showLists
//│ > [
//│ >   [1, 2, 3],
//│ >   [2, 1, 3],
//│ >   [2, 3, 1],
//│ >   [1, 3, 2],
//│ >   [3, 1, 2],
//│ >   [3, 2, 1]
//│ > ]

fun permutations'(xs) = if xs is
  Nil then Nil
  Cons(x, Nil) then (x :: Nil) :: Nil
  else xs
    Iter.fromStack()
    Iter.folded of Nil, (acc, x) => acc ::: permutations'(xs filter of (y) => x != y)
      Iter.fromStack()
      Iter.mapping((ys) => x :: ys)
      Iter.toStack()

permutations'(Nil) |> showLists
//│ > [
//│ > 
//│ > ]

permutations'(1 :: Nil) |> showLists
//│ > [
//│ >   [1]
//│ > ]

permutations'(1 :: 2 :: Nil) |> showLists
//│ > [
//│ >   [1, 2],
//│ >   [2, 1]
//│ > ]

permutations'(1 :: 2 :: 3 :: Nil) |> showLists
//│ > [
//│ >   [1, 2, 3],
//│ >   [1, 3, 2],
//│ >   [2, 1, 3],
//│ >   [2, 3, 1],
//│ >   [3, 1, 2],
//│ >   [3, 2, 1]
//│ > ]

permutations'(1 :: 2 :: 3 :: 4 :: Nil) |> showLists
//│ > [
//│ >   [1, 2, 3, 4],
//│ >   [1, 2, 4, 3],
//│ >   [1, 3, 2, 4],
//│ >   [1, 3, 4, 2],
//│ >   [1, 4, 2, 3],
//│ >   [1, 4, 3, 2],
//│ >   [2, 1, 3, 4],
//│ >   [2, 1, 4, 3],
//│ >   [2, 3, 1, 4],
//│ >   [2, 3, 4, 1],
//│ >   [2, 4, 1, 3],
//│ >   [2, 4, 3, 1],
//│ >   [3, 1, 2, 4],
//│ >   [3, 1, 4, 2],
//│ >   [3, 2, 1, 4],
//│ >   [3, 2, 4, 1],
//│ >   [3, 4, 1, 2],
//│ >   [3, 4, 2, 1],
//│ >   [4, 1, 2, 3],
//│ >   [4, 1, 3, 2],
//│ >   [4, 2, 1, 3],
//│ >   [4, 2, 3, 1],
//│ >   [4, 3, 1, 2],
//│ >   [4, 3, 2, 1]
//│ > ]
