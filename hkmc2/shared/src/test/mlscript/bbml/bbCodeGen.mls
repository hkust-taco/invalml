:js

:global
:bbml
//│ Type: ⊤


:sjs
42
//│ JS (unsanitized):
//│ 42
//│ = 42
//│ Type: Int

:sjs
1 + 1
//│ JS (unsanitized):
//│ 1 + 1
//│ = 2
//│ Type: Int


:sjs
1.0 +. 2.14
//│ JS (unsanitized):
//│ 1.0 + 2.14
//│ = 3.14
//│ Type: Num


:sjs
let x = 1 in x + 1
//│ JS (unsanitized):
//│ let x; x = 1; x + 1
//│ = 2
//│ Type: Int


:sjs
"abc"
//│ JS (unsanitized):
//│ "abc"
//│ = "abc"
//│ Type: Str

:sjs
false
//│ JS (unsanitized):
//│ false
//│ = false
//│ Type: Bool

:sjs
(x => x) as [T] -> T -> T
//│ JS (unsanitized):
//│ let lambda; lambda = (undefined, function (x1) { return x1 }); lambda
//│ = [function]
//│ Type: ['T] -> ('T) ->{⊥} 'T


:sjs
data class Foo(x: Int)
//│ JS (unsanitized):
//│ let Foo1;
//│ Foo1 = function Foo(x2) {
//│   return new Foo.class(x2);
//│ };
//│ Foo1.class = class Foo {
//│   constructor(x1) {
//│     this.x = x1;
//│   }
//│   toString() { return "Foo(" + runtime.render(this.x) + ")"; }
//│ };
//│ Type: ⊤


:sjs
new Foo(42)
//│ JS (unsanitized):
//│ new Foo1.class(42)
//│ = Foo(42)
//│ Type: Foo


:sjs
let foo = new Foo(42) in foo.Foo#x
//│ JS (unsanitized):
//│ let foo, tmp; tmp = new Foo1.class(42); foo = tmp; foo.x
//│ = 42
//│ Type: Int


:sjs
fun inc(x) = x + 1
//│ JS (unsanitized):
//│ let inc; inc = function inc(x1) { return x1 + 1 };
//│ Type: ⊤


:sjs
inc(41)
//│ JS (unsanitized):
//│ inc(41)
//│ = 42
//│ Type: Int


:sjs
if 1 == 2 then 0 else 42
//│ JS (unsanitized):
//│ let scrut; scrut = 1 == 2; if (scrut === true) { 0 } else { 42 }
//│ = 42
//│ Type: Int


:sjs
if 1 is Int then 1 else 0
//│ JS (unsanitized):
//│ let scrut1; scrut1 = 1; if (globalThis.Number.isInteger(scrut1)) { 1 } else { 0 }
//│ = 1
//│ Type: Int


data class Foo()
//│ Type: ⊤



:sjs
let foo = new Foo()
if foo is Foo then 1 else 0
//│ JS (unsanitized):
//│ let foo1, tmp1;
//│ tmp1 = new Foo3.class();
//│ foo1 = tmp1;
//│ if (foo1 instanceof Foo3.class) {
//│   1
//│ } else {
//│   0
//│ }
//│ = 1
//│ foo = Foo()
//│ Type: Int


:sjs
fun pow(x) = case
  0 then 1
  n then x * pow(x)(n-1)
//│ JS (unsanitized):
//│ let pow;
//│ pow = function pow(x1) {
//│   let lambda1;
//│   lambda1 = (undefined, function (caseScrut) {
//│     let n, tmp2, tmp3, tmp4;
//│     if (caseScrut === 0) {
//│       return 1
//│     } else {
//│       n = caseScrut;
//│       tmp2 = pow(x1);
//│       tmp3 = n - 1;
//│       tmp4 = runtime.safeCall(tmp2(tmp3));
//│       return x1 * tmp4
//│     }
//│   });
//│   return lambda1
//│ };
//│ Type: ⊤


:sjs
fun not = case
  true then false
  false then true
//│ JS (unsanitized):
//│ let not;
//│ not = function not() {
//│   let lambda1;
//│   lambda1 = (undefined, function (caseScrut) {
//│     if (caseScrut === true) {
//│       return false
//│     } else if (caseScrut === false) {
//│       return true
//│     } else {
//│       throw new globalThis.Error("match error");
//│     }
//│   });
//│   return lambda1
//│ };
//│ Type: ⊤


:expect true
:sjs
not of false
//│ JS (unsanitized):
//│ let tmp2; tmp2 = not(); tmp2(false)
//│ = true
//│ Type: Bool


:sjs
fun fact = case
  0 then 1
  n then n * fact(n - 1)
//│ JS (unsanitized):
//│ let fact;
//│ fact = function fact() {
//│   let lambda1;
//│   lambda1 = (undefined, function (caseScrut) {
//│     let n, tmp3, tmp4, tmp5;
//│     if (caseScrut === 0) {
//│       return 1
//│     } else {
//│       n = caseScrut;
//│       tmp3 = fact();
//│       tmp4 = n - 1;
//│       tmp5 = tmp3(tmp4);
//│       return n * tmp5
//│     }
//│   });
//│   return lambda1
//│ };
//│ Type: ⊤


:expect 6
fact(3)
//│ = 6
//│ Type: Int


:sjs
region x in 42
//│ JS (unsanitized):
//│ let x1; x1 = new this.Region(); 42
//│ = 42
//│ Type: Int


:sjs
region x in x
//│ JS (unsanitized):
//│ let x2; x2 = new this.Region(); x2
//│ = Region
//│ Type: Region[?]


:sjs
region x in x.ref 42
//│ JS (unsanitized):
//│ let x3; x3 = new this.Region(); new this.Ref(x3, 42)
//│ = Ref(Region, 42)
//│ Type: Ref[Int, ?]


:sjs
region x in let y = x.ref 42 in !y
//│ JS (unsanitized):
//│ let x4, y, tmp4; x4 = new this.Region(); tmp4 = new this.Ref(x4, 42); y = tmp4; y.value
//│ = 42
//│ Type: Int


:sjs
region x in let y = x.ref 42 in y := 0
//│ JS (unsanitized):
//│ let x5, y1, tmp5; x5 = new this.Region(); tmp5 = new this.Ref(x5, 42); y1 = tmp5; y1.value = 0; 0
//│ = 0
//│ Type: Int



data class LsAlg[A, E](nil:() -> E, cons: (A, E) -> E)
//│ Type: ⊤

fun nil(x) = x.LsAlg#nil()
fun cons(x, y, z) = x.LsAlg#cons(y, z)
//│ Type: ⊤

data class Nil()
data class Cons[A, B](val x: A,val y: B)
//│ Type: ⊤

fun mk() = new LsAlg(() => new Nil, (x, y) => new Cons(x, y))
//│ Type: ⊤

// fun xs: [E] -> LsAlg[in Int, E] -> E
fun xs(x) = x cons(1, x nil())
//│ Type: ⊤

fun ys: [E] -> LsAlg[in Nothing, E] -> E
fun ys(x) = x nil()
//│ Type: ⊤

fun zs: [E] -> LsAlg[in Int | E, E] -> E
fun zs(x) = x cons(xs(x), x cons(ys(x),x nil()))
//│ Type: ⊤

mk() zs()
//│ = Cons(Cons(1, Nil()), Cons(Nil(), Nil()))
//│ Type: Nil ∨ Cons['A, 'B]
//│ Where:
//│   ('E ∨ Cons['A, 'B]) ∨ Nil <: 'B
//│   Nil <: 'E
//│   Cons['A, 'B] <: 'E
//│   'E ∨ Int <: 'A
