// :bbml


declare class Any
declare class Nothing
declare class Object

declare class untyped

declare class Unit
declare class Bool
declare class Int
declare class Num

data
  class
    CodeBase[T, C, S]
    Region[T]
    Ref[T, S](reg: Region[T], value: S)

@untyped
set
  globalThis.CodeBase = CodeBase
  globalThis.Region = Region
  globalThis.Ref = Ref

declare class Function

declare class Str(length: Int, concat: Str -> Str)

declare class Error(msg: Str)


declare module source with
  object
    line: Int
    name: Str
    file: Str

declare module js with
  fun try_catch

declare module debug with
  fun printStack
  fun getLocals


declare fun run: [T] -> CodeBase[out T, out Nothing, out Any] -> T
declare fun log: Str -> Any
declare fun error: Nothing

declare fun (+): (Int, Int) -> Int
declare fun (-): (Int, Int) -> Int
declare fun (*): (Int, Int) -> Int
declare fun (/): (Int, Int) -> Num
declare fun (+.): (Num, Num) -> Num
declare fun (-.): (Num, Num) -> Num
declare fun (*.): (Num, Num) -> Num
declare fun (/.): (Num, Num) -> Num

declare fun (<): (Int, Int) -> Bool
declare fun (>): (Int, Int) -> Bool
declare fun (<=): (Int, Int) -> Bool
declare fun (>=): (Int, Int) -> Bool
declare fun (==): [T] -> (T, T) -> Bool
declare fun (!=): [T] -> (T, T) -> Bool

declare fun (&&): (Bool, Bool) -> Bool
declare fun (||): (Bool, Bool) -> Bool


fun print(x) = @untyped globalThis.console.log(x)


