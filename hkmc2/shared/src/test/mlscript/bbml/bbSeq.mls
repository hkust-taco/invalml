:bbml



data class Seq[A, E](next: () ->{E} A)

fun map: [A, B, E] -> Seq[out A, out E] -> (A ->{E} B) -> Seq[out B, out E]

// * Note: equivalent since Seq is covariant:
// fun map: [A, B, E, F] -> Seq[out A, out E] -> (A ->{F} B) -> Seq[out B, out E | F]

// * Forces the elements of the sequence to be evaluated and caches them
fun force_cache: [A, B, E] -> Seq[out A, out E] ->{E} Seq[out B, Nothing]


// * Dummy implementation
fun mapi: [A, E] -> Seq[out A, out E] -> ((Int, A) ->{E} A) ->{Nothing} Seq[out A, out E]
fun mapi = s => f =>
  region r in
    map(s) of x => f(0, x)

// * Should be an error. This definition would not be referentially transparent.
// * The error message needs improvement, though.
:e
fun mapi: [A, E] -> Seq[out A, out E] -> ((Int, A) ->{E} A) ->{Nothing} Seq[out A, out E]
fun mapi = s => f =>
  region r in
    let i = r.ref 0
    map(s) of x =>
      i := !i + 1
      f(!i, x)
//│ ╔══[ERROR] Type error in region expression with expected type Seq[out A, out E]
//│ ║  l.28: 	    let i = r.ref 0
//│ ║        	            ^^^^^^^
//│ ║  l.29: 	    map(s) of x =>
//│ ║        	^^^^^^^^^^^^^^^^^^
//│ ║  l.30: 	      i := !i + 1
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.31: 	      f(!i, x)
//│ ║        	^^^^^^^^^^^^^^
//│ ╟── because: cannot constrain  Seq[in ⊥ out 'B, in ⊥ out 'E1]  <:  Seq[in ⊥ out A, in ⊥ out E]
//│ ╟── because: cannot constrain  'E1  <:  E
//│ ╟── because: cannot constrain  'E1  <:  E
//│ ╟── because: cannot constrain  'reg  <:  E
//│ ╟── because: cannot constrain  'reg  <:  E
//│ ╟── because: cannot constrain  'r ∧ ¬outer  <:  E
//│ ╟── because: cannot constrain  'r  <:  E ∨ outer
//│ ╙── because: cannot constrain  ¬outer  <:  E ∨ outer
//│ ╔══[ERROR] Type error in region expression with expected type Seq[out A, out E]
//│ ║  l.28: 	    let i = r.ref 0
//│ ║        	            ^^^^^^^
//│ ║  l.29: 	    map(s) of x =>
//│ ║        	^^^^^^^^^^^^^^^^^^
//│ ║  l.30: 	      i := !i + 1
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.31: 	      f(!i, x)
//│ ║        	^^^^^^^^^^^^^^
//│ ╟── because: cannot constrain  Seq[in ⊥ out 'B, in ⊥ out 'E1]  <:  Seq[in ⊥ out A, in ⊥ out E]
//│ ╟── because: cannot constrain  'E1  <:  E
//│ ╟── because: cannot constrain  'E1  <:  E
//│ ╟── because: cannot constrain  'reg  <:  E
//│ ╟── because: cannot constrain  'reg  <:  E
//│ ╟── because: cannot constrain  'r ∧ ¬outer  <:  E
//│ ╟── because: cannot constrain  'r  <:  E ∨ outer
//│ ╙── because: cannot constrain  ¬outer  <:  E ∨ outer
//│ ╔══[ERROR] Type error in region expression with expected type Seq[out A, out E]
//│ ║  l.28: 	    let i = r.ref 0
//│ ║        	            ^^^^^^^
//│ ║  l.29: 	    map(s) of x =>
//│ ║        	^^^^^^^^^^^^^^^^^^
//│ ║  l.30: 	      i := !i + 1
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.31: 	      f(!i, x)
//│ ║        	^^^^^^^^^^^^^^
//│ ╟── because: cannot constrain  Seq[in ⊥ out 'B, in ⊥ out 'E1]  <:  Seq[in ⊥ out A, in ⊥ out E]
//│ ╟── because: cannot constrain  'E1  <:  E
//│ ╟── because: cannot constrain  'E1  <:  E
//│ ╟── because: cannot constrain  'reg  <:  E
//│ ╟── because: cannot constrain  'reg  <:  E
//│ ╟── because: cannot constrain  'r ∧ ¬outer  <:  E
//│ ╟── because: cannot constrain  'r  <:  E ∨ outer
//│ ╙── because: cannot constrain  ¬outer  <:  E ∨ outer

// * Notice the inferred type, which produces an unusable Sequence (of effect `?` ie `Any`)
fun mapi = s => f =>
  region r in
    let i = r.ref 0
    map(s) of x =>
      i := !i + 1
      f(!i, x)
mapi
//│ Type: [outer, 'A, 'E, 'app, 'eff] -> Seq[out 'A, out 'E] -> (((Int, 'A) ->{'eff} 'app) -> Seq[out 'app, out (¬outer ∨ 'eff) ∨ 'E])

// * This version is correct as it keeps the mutation encapsulated within the region
fun mapi_force: [A, E] -> Seq[out A, out E] -> ((Int, A) ->{E} A) ->{E} Seq[out A, Nothing]
fun mapi_force = s => f =>
  region r in
    let i = r.ref 0
    force_cache of map(s) of x =>
      i := !i + 1
      f(!i, x)

// * An alternative version that takes an existing region in parameter
fun mapi: [A, R, E] -> (Seq[out A, out E], Region[R]) -> ((Int, A) ->{E} A) ->{R} Seq[out A, out E | R]
fun mapi = (s, r) => f =>
  let i = r.ref 0
  map(s) of x =>
    i := !i + 1
    f(!i, x)

// * Simpler; should be equivalent when Region is covariant
fun mapi: [A, E] -> (Seq[out A, out E], Region[E]) -> ((Int, A) ->{E} A) ->{E} Seq[out A, out E]
fun mapi = (s, r) => f =>
  let i = r.ref 0
  map(s) of x =>
    i := !i + 1
    f(!i, x)


// * Example usage

fun mkSeq: [A, E] -> (() ->{E} A) ->{E} Seq[out A, out E]
fun head: [A, E] -> Seq[out A, out E] ->{E} A

region r in
  let sum = r.ref 0
  let s1 = mkSeq of () =>
    sum := !sum + 1,
    !sum
  let s2 = mapi(s1, r) of (x, i) => x * i
  !sum + head(s2)
//│ Type: Int


fun r: Ref[Int, Nothing]

r := 1
!r
//│ Type: Int

:e
r := 1
! r // because of the space, this is a NL-op
//│ ╔══[ERROR] Variable not found: !
//│ ║  l.143: 	! r // because of the space, this is a NL-op
//│ ╙──       	^
//│ Type: ⊥

r := 1, // `,` to avoid parsing `! r` on next line as continuation of expression
! r
//│ Type: Int


