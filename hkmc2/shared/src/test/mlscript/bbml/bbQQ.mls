:bbml


`42
//│ Type: CodeBase[out Int, ⊥, ?]

:p
`false
//│ ┊`┊false┊
//│ Parsed:
//│ 	Quoted(BoolLit(false))
//│ Type: CodeBase[out Bool, ⊥, ?]

`"rua"
//│ Type: CodeBase[out Str, ⊥, ?]

`3.14
//│ Type: CodeBase[out Num, ⊥, ?]


x `=> x
//│ Type: CodeBase[out 'x -> 'x, ⊥, ?]

x `=> `42
//│ Type: CodeBase[out ⊤ -> Int, ⊥, ?]

:e
x `=> 42
//│ ╔══[ERROR] Type error in unquoted term
//│ ║  l.28: 	x `=> 42
//│ ║        	      ^^
//│ ╙── because: cannot constrain  Int  <:  CodeBase[in ⊥ out 'cde, in ⊥ out 'ctx, in ⊥ out ⊤]
//│ Type: CodeBase[out ⊤ -> ⊥, ⊥, ?]


f `=> x `=> f`(x)
//│ Type: CodeBase[out ('x -> 'app) -> ('x -> 'app), ⊥, ?]



x `=> y `=> x `+ y
//│ Type: CodeBase[out Int -> (Int -> Int), ⊥, ?]



(x, y) `=> x `+ y
//│ Type: CodeBase[out (Int, Int) -> Int, ⊥, ?]


(x, y, z) `=> x `+ y `+ z
//│ Type: CodeBase[out (Int, Int, Int) -> Int, ⊥, ?]

f `=> x `=> y `=> f`(x, y)
//│ Type: CodeBase[out (('x, 'y) -> 'app) -> ('x -> ('y -> 'app)), ⊥, ?]

`let x = `42 `in x
//│ Type: CodeBase[out Int, ⊥, ?]

:e
`let x = 42 `in x
//│ ╔══[ERROR] Type error in unquoted term
//│ ║  l.60: 	`let x = 42 `in x
//│ ║        	         ^^
//│ ╙── because: cannot constrain  Int  <:  CodeBase[in ⊥ out 'cde, in ⊥ out 'ctx, in ⊥ out ⊤]
//│ Type: CodeBase[⊥, ⊥, ?]

:e
`let x = `0 `in 1
//│ ╔══[ERROR] Type error in unquoted term
//│ ║  l.68: 	`let x = `0 `in 1
//│ ║        	                ^
//│ ╙── because: cannot constrain  Int  <:  CodeBase[in ⊥ out 'cde, in ⊥ out 'ctx, in ⊥ out ⊤]
//│ Type: CodeBase[⊥, ⊥, ?]



`if `true then `true else `false
//│ Type: CodeBase[out Bool, ⊥, ?]



x `=> `if x `== `0.0 then `1.0 else x
//│ Type: CodeBase[out 'x -> ('x ∨ Num), ⊥, ?]

run(`1)
//│ Type: Int


:e
run(1)
//│ ╔══[ERROR] Type error in integer literal with expected type CodeBase[out 'T, ⊥, ?]
//│ ║  l.90: 	run(1)
//│ ║        	    ^
//│ ╙── because: cannot constrain  Int  <:  CodeBase[in ⊥ out 'T, ⊥, in ⊥ out ⊤]
//│ Type: ⊥

:e
x `=> run(x)
//│ ╔══[ERROR] Type error in reference with expected type CodeBase[out 'T, ⊥, ?]
//│ ║  l.98: 	x `=> run(x)
//│ ║        	          ^
//│ ╟── because: cannot constrain  CodeBase['x, x, ⊥]  <:  CodeBase[in ⊥ out 'T, ⊥, in ⊥ out ⊤]
//│ ╙── because: cannot constrain  x  <:  ⊥
//│ Type: CodeBase[out CodeBase[out 'cde, ?, ?] -> 'cde, out 'ctx, ?]

:e
`let x = `42 `in run(x)
//│ ╔══[ERROR] Type error in reference with expected type CodeBase[out 'T, ⊥, ?]
//│ ║  l.107: 	`let x = `42 `in run(x)
//│ ║         	                     ^
//│ ╟── because: cannot constrain  CodeBase['cde, x, ⊥]  <:  CodeBase[in ⊥ out 'T, ⊥, in ⊥ out ⊤]
//│ ╙── because: cannot constrain  x  <:  ⊥
//│ ╔══[ERROR] Type error in unquoted term
//│ ║  l.107: 	`let x = `42 `in run(x)
//│ ║         	                 ^^^^^^
//│ ╟── because: cannot constrain  'T  <:  CodeBase[in ⊥ out 'cde1, in ⊥ out 'ctx, in ⊥ out ⊤]
//│ ╟── because: cannot constrain  'T  <:  CodeBase[in ⊥ out 'cde1, in ⊥ out 'ctx, in ⊥ out ⊤]
//│ ╟── because: cannot constrain  'cde  <:  CodeBase[in ⊥ out 'cde1, in ⊥ out 'ctx, in ⊥ out ⊤]
//│ ╟── because: cannot constrain  'cde  <:  CodeBase[in ⊥ out 'cde2, in ⊥ out 'ctx1, in ⊥ out ⊤]
//│ ╙── because: cannot constrain  Int  <:  CodeBase[in ⊥ out 'cde2, in ⊥ out 'ctx1, in ⊥ out ⊤]
//│ Type: CodeBase[⊥, ⊥, ?]
