:js

// Syntaxes

using Int = 42

using Int as someInt = 42

module M with
  fun f(using Int) = 42

module M with
  fun f(using foo: Int) = 42

module M with
  fun f(using foo: Int, bar: Int) = 42

module M with
  fun f(using foo: Int)(bar: Int) = 42

module M with
  fun f(foo: Int)(using bar: Int) = 42

module M with
  fun f(using foo: Int)(using bar: Int) = 42

module M with
  fun f(using foo: Int, bar: Int) = 42

module M with
  fun f(using Int, Int) = 42

module M with
  fun foo(using Int, arg: Str) = 42

module M with
  fun foo(using arg: Str, Int) = 42


// Basic Resolution

abstract class Foo[T] with
  fun foo(): T
class IntFoo extends Foo[Int] with
  fun foo(): Int = 42
class StrFoo extends Foo[Str] with
  fun foo(): Str = "42"
module M with
  fun foo(using someInt: Int): Int = someInt
  fun strFoo(using someFoo: Foo[Str]): Str = someFoo.foo()
  fun intFoo(using someFoo: Foo[Int]): Int = someFoo.foo()
  fun tFoo[T](using someFoo: Foo[T]): T = someFoo.foo()

using Int as i = 24

using Foo[Int] = new IntFoo()

using Foo[Str] = new StrFoo()

// should resolve to foo(i)
:expect 24
M.foo
//│ = 24

// should resolve to intFoo(new IntFoo())
:expect 42
M.intFoo
//│ = 42

// should resolve to strFoo(new StrFoo())
:expect "42"
M.strFoo
//│ = "42"

// should resolve to 100 + intFoo(new IntFoo())
:expect 142
100 + M.intFoo
//│ = 142

// should be able to resolve in function body from outer scope
:expect 42
fun f: Int = M.intFoo
f
//│ = 42

// should be able to resolve in function body from parameters
:expect 3.14
module N with
  fun f(using someNum: Num): Num = someNum
  fun g(using Num): Num = N.f
using Num = 3.14
N.g
//│ = 3.14


// Parameterized Type Resolution

// should resolve to tFoo(new StrFoo())
:expect "42"
M.tFoo
//│ = "42"

// should resolve to tFoo(new IntFoo())
:expect 42
M.tFoo[Int]
//│ = 42

abstract class Bar[A, B] with
  fun bar(): Str
class IntStrBar extends Bar[Int, Str] with
  fun bar(): Str = "IntStr"
class StrIntBar extends Bar[Str, Int] with
  fun bar(): Str = "StrInt"
module M with
  fun tBar1[T](using someFoo: Bar[Int, T]): Str = someFoo.bar()
  fun tBar2[T](using someFoo: Bar[Str, T]): Str = someFoo.bar()
  fun tBar3[A, B](using someFoo: Bar[A, B]): Str = someFoo.bar()

using Bar[Int, Str] = new IntStrBar()
using Bar[Str, Int] = new StrIntBar()

// should resolve to tFoo1(new IntStrBar())
:expect "IntStr"
M.tBar1
//│ = "IntStr"

// should resolve to tFoo2(new StrIntBar())
:expect "StrInt"
M.tBar2
//│ = "StrInt"

// should resolve to tFoo3(new StrIntBar())
:expect "StrInt"
M.tBar3
//│ = "StrInt"

// should resolve to tFoo3(new IntStrBar())
:expect "IntStr"
M.tBar3[Int, Str]
//│ = "IntStr"


// Monoid Example

abstract class Monoid[T] with
  fun combine(a: T, b: T): T
  fun empty: T

object IntAddMonoid extends Monoid[Int] with
  fun combine(a: Int, b: Int): Int = a + b
  fun empty: Int = 0

object IntMulMonoid extends Monoid[Int] with
  fun combine(a: Int, b: Int): Int = a * b
  fun empty: Int = 1

module M with
  fun foldInt(x1: Int, x2: Int, x3: Int)(using m: Monoid[Int]): Int =
    m.combine(x1, m.combine(x2, m.combine(x3, m.empty)))
  fun fold[T](x1: T, x2: T, x3: T)(using m: Monoid[T]): T =
    m.combine(x1, m.combine(x2, m.combine(x3, m.empty)))

:expect 9
using Monoid[Int] = IntAddMonoid
M.foldInt(2, 3, 4)
//│ = 9

:expect 24
using Monoid[Int] = IntMulMonoid
M.foldInt(2, 3, 4)
//│ = 24

:expect 6
using Monoid[Int] = IntAddMonoid
M.fold(1, 2, 3)
//│ = 6


// Generalized Module Methods

using Int = 42

:expect 42
fun foo()(using i: Int) = i
foo()
//│ = 42

:expect 42
fun main() =
  fun foo()(using i: Int) = i
  foo()
main()
//│ = 42
