:js


using Str = "ok"

fun bar = M.foo()
module M with
  fun foo()(using s: Str) = s

:expect "ok"
bar
//│ = "ok"

fun bar = M.getN.foo()
module M with
  fun getN: module N = N
module N with
  fun foo()(using Str) = 1

:expect 1
bar
//│ = 1


:e
:re
fun test = M.mtd()
module M with
  fun mtd()(using n: Int) = n
module Example with
  fun foo(): module M = M
test
//│ ╔══[ERROR] Cannot query instance of type Int for call: 
//│ ║  l.27: 	fun test = M.mtd()
//│ ║        	           ^^^^^^^
//│ ╟── Required by contextual parameter declaration: 
//│ ║  l.29: 	  fun mtd()(using n: Int) = n
//│ ║        	                  ^^^^^^
//│ ╙── Missing instance: Expected: Int; Available: (Str)
//│ ═══[RUNTIME ERROR] Error: Function expected 1 argument but got 0


:e
:re
fun test = Example.foo().mtd()
module M with
  fun mtd()(using n: Int) = n
module Example with
  fun foo(): module M = M
test
//│ ╔══[ERROR] Cannot query instance of type Int for call: 
//│ ║  l.45: 	fun test = Example.foo().mtd()
//│ ║        	           ^^^^^^^^^^^^^^^^^^^
//│ ╟── Required by contextual parameter declaration: 
//│ ║  l.47: 	  fun mtd()(using n: Int) = n
//│ ║        	                  ^^^^^^
//│ ╙── Missing instance: Expected: Int; Available: (Str)
//│ ═══[RUNTIME ERROR] Error: Function expected 1 argument but got 0


using Int = 42

fun test = Example.foo().mtd()
module M with
  fun mtd()(using n: Int) = n
module Example with
  fun foo(): module M = M

:expect 42
test
//│ = 42


