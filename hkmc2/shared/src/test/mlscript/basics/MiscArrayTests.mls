:js


let xs = [0, 1, 2]
//│ xs = [0, 1, 2]

xs. print()
//│ > [0, 1, 2]

let f = xs. print
//│ f = [function]

f()
//│ > [0, 1, 2]

xs.reverse()
//│ = [2, 1, 0]

xs
//│ = [2, 1, 0]

:re
xs.map(x => x * 2)
//│ ═══[RUNTIME ERROR] Error: Function expected 1 argument but got 3

xs.map((x, i, a) => x * 2)
//│ = [4, 2, 0]

:fixme
xs.map((x, ...) => x * 2)
//│ /!!!\ Uncaught error: scala.MatchError: Spread(keyword '...',Some(Loc(11,14,MiscArrayTests.mls:+30)),None) (of class hkmc2.syntax.Tree$Spread)

xs.map((x, ..._) => x * 2)
//│ = [4, 2, 0]

fun map(xs, f) = xs.map((x, ...bs) => f(x))

xs. map(x => x * 2). print()
//│ > [4, 2, 0]

// * Note: the RHS of `.` is a self-contained block, thus implicitly parenthesized.
:sjs
:e
:re
xs .
  map(x => x * 2)
//│ ╔══[ERROR] Expected 2 arguments, got 1
//│ ║  l.46: 	  map(x => x * 2)
//│ ╙──      	     ^^^^^^^^^^^^
//│ JS (unsanitized):
//│ let tmp5, lambda4;
//│ lambda4 = (undefined, function (x) {
//│   return x * 2
//│ });
//│ tmp5 = map(lambda4);
//│ Predef.passTo(xs, tmp5)
//│ ═══[RUNTIME ERROR] Error: Function 'map' expected 2 arguments but got 1

:e
:re
xs.
  map(x => x * 2)
//│ ╔══[ERROR] Expected 2 arguments, got 1
//│ ║  l.62: 	  map(x => x * 2)
//│ ╙──      	     ^^^^^^^^^^^^
//│ ═══[RUNTIME ERROR] Error: Function 'map' expected 2 arguments but got 1

:pt
xs
  . map(f)
//│ Parsed tree:
//│ App:
//│   lhs = OpApp:
//│     lhs = Ident of "xs"
//│     op = Ident of "."
//│     rhss = Ls of 
//│       Ident of "map"
//│   rhs = Tup of Ls of 
//│     Ident of "f"
//│ > [2, 1, 0] 2
//│ > [2, 1, 0] 1
//│ > [2, 1, 0] 0
//│ = [(), (), ()]

xs
  . map(x => x * 2)
//│ = [4, 2, 0]

xs
  . map(x => x * 2)
  . print()
//│ > [4, 2, 0]

fun f = print(0)

f
//│ > 0

f
//│ > 0


