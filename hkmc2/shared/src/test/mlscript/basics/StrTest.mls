:js

import "../../mlscript-compile/Str.mls"

open Str


concat of "a", "b", "c"
//│ = "abc"

concat of
  "a"
  "b"
  "c"
//│ = "abc"


// TODO (~) should be sanitized

:e
(~)("a", "b", "c")
//│ ╔══[ERROR] Expected 2 arguments, got 3
//│ ║  l.21: 	(~)("a", "b", "c")
//│ ╙──      	   ^^^^^^^^^^^^^^^
//│ = "ab"


:e
(~)("a")
//│ ╔══[ERROR] Expected 2 arguments, got 1
//│ ║  l.29: 	(~)("a")
//│ ╙──      	   ^^^^^
//│ = "aundefined"

:ge
~"a"
//│ ╔══[COMPILATION ERROR] Unexpected type annotations ~"a"
//│ ║  l.36: 	~"a"
//│ ╙──      	 ^^^


:ge
~("a", "b")
//│ ╔══[COMPILATION ERROR] Unexpected type annotations ~( "a"; "b" )
//│ ║  l.43: 	~("a", "b")
//│ ╙──      	       ^^^


:pe
:ge
~ of "a", "b"
//│ ╔══[PARSE ERROR] Expected start of statement in this position; found 'of' keyword instead
//│ ║  l.51: 	~ of "a", "b"
//│ ╙──      	  ^^
//│ ╔══[PARSE ERROR] Expected end of input; found literal instead
//│ ║  l.51: 	~ of "a", "b"
//│ ╙──      	     ^^^
//│ ═══[COMPILATION ERROR] Unexpected type annotations ~<error>

(~) of "a", "b"
//│ = "ab"


fun test(...xs) =
  concat of ...xs, "!"

test("a", "b", "c")
//│ = "abc!"


"a" Str.concat2("b")
//│ = "ab"

"a" Str.concat2 of "b"
//│ = "ab"


