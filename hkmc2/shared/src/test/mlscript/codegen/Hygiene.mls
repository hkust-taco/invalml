:js


// * Note how we avoid the name clash between the internal name `Test` of the class
// * and the external name `Test1` of its singleton instance.
:sjs
object Test with
  val x = 12
  fun foo() =
    print(Test)
    Test.x
//│ JS (unsanitized):
//│ let Test1;
//│ const Test$class = class Test {
//│   constructor() {
//│     this.x = 12;
//│   }
//│   foo() {
//│     let tmp;
//│     tmp = Predef.print(Test1);
//│     return Test1.x
//│   }
//│   toString() { return "Test"; }
//│ }; Test1 = new Test$class;
//│ Test1.class = Test$class;

Test
//│ = Test

print(Test)
//│ > Test

:sjs
Test.foo()
//│ JS (unsanitized):
//│ Test1.foo()
//│ > Test
//│ = 12

:sjs
val Test = "oops"
//│ JS (unsanitized):
//│ let Test2; Test2 = "oops";
//│ Test = "oops"

:re
Test.foo()
//│ ═══[RUNTIME ERROR] TypeError: Test2.foo is not a function


:sjs
let x = 1
let f = () => x
let x = 2
f()
//│ JS (unsanitized):
//│ let x, f, x1, f1; x = 1; f1 = function f() { return x }; f = f1; x1 = 2; runtime.safeCall(f())
//│ = 1
//│ f = [function f]
//│ x = 2


:ssjs
:e
module Test with
  val x = 1
  let x = 2
//│ ╔══[ERROR] Name 'x' is already used
//│ ║  l.67: 	  let x = 2
//│ ║        	      ^^^^^
//│ ╟── by a member declared in the same block
//│ ║  l.66: 	  val x = 1
//│ ╙──      	      ^^^^^
//│ JS:
//│ (class Test3 {
//│   static #x;
//│   static {
//│     Test4 = Test3;
//│     this.x = 1;
//│     Test3.#x = 2;
//│   }
//│   static toString() { return "Test"; }
//│ });
//│ block$res8 = undefined;

Test.x
//│ = 1


module Test with
  let x = 1
  let f = () => x
  let x = 2
  print(f())
//│ > 1


:sjs
data class Cls(x) with
  let x += 1
  fun foo = x
  let x *= 2
  fun bar = x
  print(this.x, x)
//│ JS (unsanitized):
//│ let Cls1;
//│ Cls1 = function Cls(x3) {
//│   return new Cls.class(x3);
//│ };
//│ Cls1.class = class Cls {
//│   #x;
//│   #x1;
//│   constructor(x2) {
//│     let tmp, tmp1;
//│     this.x = x2;
//│     tmp = this.x + 1;
//│     this.#x = tmp;
//│     tmp1 = this.#x * 2;
//│     this.#x1 = tmp1;
//│     Predef.print(this.x, this.#x1)
//│   }
//│   get foo() {
//│     return this.#x;
//│   } 
//│   get bar() {
//│     return this.#x1;
//│   }
//│   toString() { return "Cls(" + globalThis.Predef.render(this.x) + ")"; }
//│ };

let cls = Cls(10)
//│ > 10 22
//│ cls = Cls(10)

:expect 10
cls.x
//│ = 10

:expect 11
cls.foo
//│ = 11

:expect 22
cls.bar
//│ = 22

module M

fun foo(): module M =
  if false then
    module A
    A
  else
    module A
    A

foo()
//│ = A


:sjs
module Whoops with
  val v: module Whoops = this
  fun f() = "Hello"
  module Whoops with
    val w: module Whoops = this
    fun g() = f()
//│ JS (unsanitized):
//│ let Whoops2;
//│ (class Whoops {
//│   static {
//│     Whoops2 = Whoops;
//│     this.v = Whoops;
//│     (class Whoops1 {
//│       static {
//│         Whoops.Whoops = Whoops1;
//│         this.w = Whoops1;
//│       }
//│       static g() {
//│         return Whoops.f()
//│       }
//│       static toString() { return "Whoops"; }
//│     });
//│   }
//│   static f() {
//│     return "Hello"
//│   }
//│   static toString() { return "Whoops"; }
//│ });

Whoops.f()
//│ = "Hello"

Whoops.Whoops
//│ = Whoops

Whoops.Whoops.g()
//│ = "Hello"


:e
Runtime
//│ ╔══[ERROR] Name not found: Runtime
//│ ║  l.202: 	Runtime
//│ ╙──       	^^^^^^^


