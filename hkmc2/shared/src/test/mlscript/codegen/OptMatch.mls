:js


data class Some(value)
object None


:sjs
fun isDefined(x) = if x is
  Some then true
  None then false
//│ JS (unsanitized):
//│ let isDefined;
//│ isDefined = function isDefined(x) {
//│   if (x instanceof Some1.class) {
//│     return true
//│   } else if (x instanceof None1.class) {
//│     return false
//│   } else {
//│     throw new globalThis.Error("match error");
//│   }
//│ };

isDefined(Some(1))
//│ = true

isDefined(None)
//│ = false


:sjs
val isDefined = case
  Some(_) then true
  None    then false
//│ JS (unsanitized):
//│ let isDefined1, tmp1, lambda;
//│ lambda = (undefined, function (caseScrut) {
//│   let param0;
//│   if (caseScrut instanceof Some1.class) {
//│     param0 = caseScrut.value;
//│     return true
//│   } else if (caseScrut instanceof None1.class) {
//│     return false
//│   } else {
//│     throw new globalThis.Error("match error");
//│   }
//│ });
//│ tmp1 = lambda;
//│ isDefined1 = tmp1;
//│ isDefined = [function]

isDefined(Some(1))
//│ = true

isDefined(None)
//│ = false


val isDefined = x => if x is
  Some(_) then true
  None    then false
//│ isDefined = [function]

isDefined(Some(1))
//│ = true

isDefined(None)
//│ = false


module Foo with
  data class Other(v)

val isOther = x => if x is
  Foo.Other(_) then true
  None    then false
//│ isOther = [function]


fun keepIfGreaterThan(x, y) =
  if x > y then Some(x) else None


1 keepIfGreaterThan(0) isDefined()
//│ = true

1
  keepIfGreaterThan(0)
  isDefined()
  console.log()
//│ > true

:fixme
1
  . keepIfGreaterThan(0)
//│ ═══[RUNTIME ERROR] Error: Function 'keepIfGreaterThan' expected 2 arguments but got 1


:fixme // or use an alternative syntax?
1
  . keepIfGreaterThan(0)
  . isDefined()
  . console.log()
//│ ═══[RUNTIME ERROR] Error: Function 'keepIfGreaterThan' expected 2 arguments but got 1


1
  |> keepIfGreaterThan(_, 0)
  |> isDefined(_)
//│ = true


