:js


fun res

val res: Int

:showRepl
fun res() = 1
//│ REPL> Sending: block$res3 = undefined
//│ REPL> Collected:
//│ >  undefined
//│ REPL> Sending: let res;try { res = function res(...args) {   runtime.checkArgs("res", 0, true, args.length);   return 1 }; block$res3 = undefined; } catch (e) { console.log('\u200B' + e.stack + '\u200B'); }
//│ REPL> Collected:
//│ >  undefined
//│ REPL> Parsed:
//│ >  undefined
//│ REPL> Sending: try { runtime.checkCall(runtime.printRaw(block$res3)) } catch (e) { console.log('\u200B' + e.stack + '\u200B'); }
//│ REPL> Collected:
//│ >  undefined
//│ >  Unit { class: [class Unit] }
//│ REPL> Parsed:
//│ >  undefined
//│ >  Unit { class: [class Unit] }

:showRepl
2 + 2
//│ REPL> Sending: block$res4 = undefined
//│ REPL> Collected:
//│ >  undefined
//│ REPL> Sending: try { block$res4 = 2 + 2; undefined } catch (e) { console.log('\u200B' + e.stack + '\u200B'); }
//│ REPL> Collected:
//│ >  undefined
//│ REPL> Parsed:
//│ >  undefined
//│ REPL> Sending: try { runtime.checkCall(runtime.printRaw(block$res4)) } catch (e) { console.log('\u200B' + e.stack + '\u200B'); }
//│ REPL> Collected:
//│ >  4
//│ >  Unit { class: [class Unit] }
//│ REPL> Parsed:
//│ >  4
//│ >  Unit { class: [class Unit] }
//│ = 4

:showRepl
res
//│ REPL> Sending: block$res5 = undefined
//│ REPL> Collected:
//│ >  undefined
//│ REPL> Sending: try { block$res5 = res; undefined } catch (e) { console.log('\u200B' + e.stack + '\u200B'); }
//│ REPL> Collected:
//│ >  undefined
//│ REPL> Parsed:
//│ >  undefined
//│ REPL> Sending: try { runtime.checkCall(runtime.printRaw(block$res5)) } catch (e) { console.log('\u200B' + e.stack + '\u200B'); }
//│ REPL> Collected:
//│ >  [function res]
//│ >  Unit { class: [class Unit] }
//│ REPL> Parsed:
//│ >  [function res]
//│ >  Unit { class: [class Unit] }
//│ = [function res]


:showRepl
let x = 1, print(x), x
//│ REPL> Sending: block$res6 = undefined
//│ REPL> Collected:
//│ >  undefined
//│ REPL> Sending: let x, tmp;try { x = 1; tmp = runtime.checkCall(Predef.print(x)); block$res6 = x; undefined } catch (e) { console.log('\u200B' + e.stack + '\u200B'); }
//│ REPL> Collected:
//│ >  1
//│ >  undefined
//│ REPL> Parsed:
//│ >  1
//│ >  undefined
//│ > 1
//│ REPL> Sending: try { runtime.checkCall(runtime.printRaw(block$res6)) } catch (e) { console.log('\u200B' + e.stack + '\u200B'); }
//│ REPL> Collected:
//│ >  1
//│ >  Unit { class: [class Unit] }
//│ REPL> Parsed:
//│ >  1
//│ >  Unit { class: [class Unit] }
//│ = 1
//│ REPL> Sending: try { runtime.checkCall(runtime.printRaw(x)) } catch (e) { console.log('\u200B' + e.stack + '\u200B'); }
//│ REPL> Collected:
//│ >  1
//│ >  Unit { class: [class Unit] }
//│ REPL> Parsed:
//│ >  1
//│ >  Unit { class: [class Unit] }
//│ x = 1


// FIXME multiline result is treated as part stdout
["***", "***", "***", "***", "***", "***", "***", "***", "***", "***", "***", "***", "***", "***", "***"]
//│ = ["***", "***", "***", "***", "***", "***", "***", "***", "***", "***", "***", "***", "***", "***", "***"]


