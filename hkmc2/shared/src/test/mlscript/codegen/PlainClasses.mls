:js

:global
:sjs


class Foo
//│ JS (unsanitized):
//│ let Foo1; Foo1 = class Foo { constructor() {} toString() { return "Foo"; } };

Foo is Foo
//│ JS (unsanitized):
//│ let scrut; scrut = Foo1; if (scrut instanceof Foo1) { true } else { false }
//│ = false

(new Foo) is Foo
//│ JS (unsanitized):
//│ let scrut1; scrut1 = new Foo1(); if (scrut1 instanceof Foo1) { true } else { false }
//│ = true

new Foo
//│ JS (unsanitized):
//│ new Foo1()
//│ = Foo

new Foo()
//│ JS (unsanitized):
//│ new Foo1()
//│ = Foo

Foo
//│ JS (unsanitized):
//│ Foo1
//│ = class Foo { constructor() {} toString() { return "Foo"; } }

:re
Foo()
//│ JS (unsanitized):
//│ Foo1()
//│ ═══[RUNTIME ERROR] TypeError: Class constructor Foo cannot be invoked without 'new'


data class Foo with { print("hi") }
print("ok")
//│ JS (unsanitized):
//│ let Foo3;
//│ Foo3 = class Foo2 {
//│   constructor() {
//│     Predef.print("hi")
//│   }
//│   toString() { return "Foo"; }
//│ };
//│ Predef.print("ok")
//│ > ok

fun test() =
  data class Foo with { print("hi") }
  print("ok")
  Foo
//│ JS (unsanitized):
//│ let test;
//│ test = function test() {
//│   let Foo5, tmp;
//│   Foo5 = class Foo4 {
//│     constructor() {
//│       Predef.print("hi")
//│     }
//│     toString() { return "Foo"; }
//│   };
//│   tmp = Predef.print("ok");
//│   return Foo5
//│ };

let t = test()
//│ JS (unsanitized):
//│ let t, tmp; tmp = test(); t = tmp;
//│ > ok
//│ t = class Foo4 {     constructor() {       runtime.checkCall(Predef.print("hi"))     }     toString() { return "Foo"; }   }

new t
//│ JS (unsanitized):
//│ new t()
//│ > hi
//│ = Foo

new t()
//│ JS (unsanitized):
//│ new t()
//│ > hi
//│ = Foo


class Foo with
  val x = 1
  let y = x + 1
  fun z() = y + x
//│ JS (unsanitized):
//│ let Foo6;
//│ Foo6 = class Foo5 {
//│   #y;
//│   constructor() {
//│     let tmp1;
//│     this.x = 1;
//│     tmp1 = this.x + 1;
//│     this.#y = tmp1;
//│   }
//│   z() {
//│     return this.#y + this.x
//│   }
//│   toString() { return "Foo"; }
//│ };


class Foo with
  val x1 = 1
  val x2 = 2
  let y1 = 3
  let y2 = 4
  fun z1() = 5
  fun z2() = 6
  print("hello")
//│ JS (unsanitized):
//│ let Foo8;
//│ Foo8 = class Foo7 {
//│   #y1;
//│   #y2;
//│   constructor() {
//│     this.x1 = 1;
//│     this.x2 = 2;
//│     this.#y1 = 3;
//│     this.#y2 = 4;
//│     Predef.print("hello")
//│   }
//│   z1() {
//│     return 5
//│   } 
//│   z2() {
//│     return 6
//│   }
//│   toString() { return "Foo"; }
//│ };


class Foo with
  val x = 1
  fun foo(y) = x + y
  fun bar(z) = foo(z) + 1
//│ JS (unsanitized):
//│ let Foo10;
//│ Foo10 = class Foo9 {
//│   constructor() {
//│     this.x = 1;
//│   }
//│   foo(y) {
//│     return this.x + y
//│   } 
//│   bar(z) {
//│     let tmp1;
//│     tmp1 = this.foo(z);
//│     return tmp1 + 1
//│   }
//│   toString() { return "Foo"; }
//│ };

let a = new Foo
print(a.x)
print(a.foo(1))
print(a.bar(1))
//│ JS (unsanitized):
//│ let a, tmp1, tmp2, tmp3, tmp4, tmp5;
//│ tmp1 = new Foo10();
//│ a = tmp1;
//│ tmp2 = Predef.print(a.x);
//│ tmp3 = runtime.safeCall(a.foo(1));
//│ tmp4 = Predef.print(tmp3);
//│ tmp5 = runtime.safeCall(a.bar(1));
//│ Predef.print(tmp5)
//│ > 1
//│ > 2
//│ > 3
//│ a = Foo



:e
class Foo with
  val x = 1
  val x = 2
//│ ╔══[ERROR] Multiple definitions of symbol 'x'
//│ ╟── defined here
//│ ║  l.187: 	  val x = 1
//│ ║         	      ^^^^^
//│ ╟── defined here
//│ ║  l.188: 	  val x = 2
//│ ╙──       	      ^^^^^
//│ JS (unsanitized):
//│ let Foo12;
//│ Foo12 = class Foo11 {
//│   constructor() {
//│     this.x = 1;
//│     this.x = 2;
//│   }
//│   toString() { return "Foo"; }
//│ };

:e
class Foo with
  val x = 1
  let x = 2
//│ ╔══[ERROR] Name 'x' is already used
//│ ║  l.209: 	  let x = 2
//│ ║         	      ^^^^^
//│ ╟── by a member declared in the same block
//│ ║  l.208: 	  val x = 1
//│ ╙──       	      ^^^^^
//│ JS (unsanitized):
//│ let Foo14;
//│ Foo14 = class Foo13 {
//│   #x;
//│   constructor() {
//│     this.x = 1;
//│     this.#x = 2;
//│   }
//│   toString() { return "Foo"; }
//│ };





// ——— TODO ———


:e
class Foo with val x = 1
//│ ╔══[ERROR] Illegal body of class definition (should be a block; found term definition).
//│ ║  l.235: 	class Foo with val x = 1
//│ ╙──       	                   ^^^^^
//│ JS (unsanitized):
//│ let Foo16; Foo16 = class Foo15 { constructor() {} toString() { return "Foo"; } };


