:js



:ssjs
fun f(x, y) = x + y
f(2, 3)
//│ JS:
//│ f = function f(...args) {
//│   runtime.checkArgs("f", 2, true, args.length);
//│   let x = args[0];
//│   let y = args[1];
//│   return x + y
//│ };
//│ block$res1 = runtime.checkCall(f(2, 3));
//│ undefined
//│ = 5


:expect NaN
:ssjs
:noSanityCheck
:e
fun f2(x, y) = x + y
f2(2)
//│ ╔══[ERROR] Expected 2 arguments, got 1
//│ ║  l.25: 	f2(2)
//│ ╙──      	^^
//│ JS:
//│ f2 = function f2(x, y) { return x + y }; block$res2 = f2(2); undefined
//│ = NaN

:ssjs
:re
:e
f(2)
//│ ╔══[ERROR] Expected 2 arguments, got 1
//│ ║  l.36: 	f(2)
//│ ╙──      	^
//│ JS:
//│ block$res3 = runtime.checkCall(f(2)); undefined
//│ ═══[RUNTIME ERROR] Error: Function 'f' expected 2 arguments but got 1


:ssjs
:re
:e
fun f(x)(y, z) = x + y + z
f(3)(4)
//│ ╔══[ERROR] Expected 2 arguments, got 1
//│ ║  l.49: 	f(3)(4)
//│ ╙──      	^
//│ JS:
//│ f1 = function f(...args) {
//│   runtime.checkArgs("f", 1, true, args.length);
//│   let x = args[0];
//│   return (...args1) => {
//│     runtime.checkArgs("", 2, true, args1.length);
//│     let y = args1[0];
//│     let z = args1[1];
//│     let tmp1;
//│     tmp1 = x + y;
//│     return tmp1 + z
//│   }
//│ };
//│ tmp = runtime.checkCall(f1(3));
//│ block$res4 = runtime.safeCall(tmp(4));
//│ undefined
//│ ═══[RUNTIME ERROR] Error: Function expected 2 arguments but got 1


:expect NaN
:ssjs
:noSanityCheck
let f = (x, y) => x + y in f(2)
//│ JS:
//│ f4 = function f(x, y) { return x + y }; f3 = f4; block$res5 = runtime.safeCall(f3(2)); undefined
//│ = NaN

:ssjs
:re
let f = (x, y) => x + y
f(2)
//│ JS:
//│ f6 = function f(...args) {
//│   runtime.checkArgs("f", 2, true, args.length);
//│   let x = args[0];
//│   let y = args[1];
//│   return x + y
//│ };
//│ f5 = f6;
//│ block$res6 = runtime.safeCall(f5(2));
//│ undefined
//│ ═══[RUNTIME ERROR] Error: Function 'f' expected 2 arguments but got 1
//│ f = [function f]


:expect NaN
:ssjs
:noSanityCheck
data class Cls(x, y) with
  fun f(z, p) = x + y + z + p
Cls(1, 2).f(3)
//│ JS:
//│ Cls1 = function Cls(x1, y1) {
//│   return new Cls.class(x1, y1);
//│ };
//│ Cls1.class = class Cls {
//│   constructor(x, y) {
//│     this.x = x;
//│     this.y = y;
//│   }
//│   f(z, p) {
//│     let tmp2, tmp3;
//│     tmp2 = this.x + this.y;
//│     tmp3 = tmp2 + z;
//│     return tmp3 + p
//│   }
//│   toString() { return "Cls(" + runtime.render(this.x) + ", " + runtime.render(this.y) + ")"; }
//│ };
//│ tmp1 = Cls1(1, 2);
//│ block$res7 = runtime.safeCall(tmp1.f(3));
//│ undefined
//│ = NaN

:ssjs
:re
data class Cls(x, y) with
  fun f(z, p) = x + y + z + p
Cls(1, 2).f(3)
//│ JS:
//│ Cls3 = function Cls(...args1) {
//│   return new Cls.class(...args1);
//│ };
//│ Cls3.class = class Cls2 {
//│   constructor(x, y) {
//│     this.x = x;
//│     this.y = y;
//│   }
//│   get f$__checkNotMethod() { runtime.deboundMethod("f", "Cls"); }
//│   f(...args) {
//│     runtime.checkArgs("f", 2, true, args.length);
//│     let z = args[0];
//│     let p = args[1];
//│     let tmp3, tmp4;
//│     tmp3 = this.x + this.y;
//│     tmp4 = tmp3 + z;
//│     return tmp4 + p
//│   }
//│   toString() { return "Cls(" + runtime.render(this.x) + ", " + runtime.render(this.y) + ")"; }
//│ };
//│ tmp2 = runtime.checkCall(Cls3(1, 2));
//│ block$res8 = runtime.safeCall(tmp2.f(3));
//│ undefined
//│ ═══[RUNTIME ERROR] Error: Function 'f' expected 2 arguments but got 1


:ssjs
:re
data class Cls(x, y) with
  fun f(z, p)(q, s) = x + y + z + p + q + s
Cls(1, 2).f(3, 4)(5)
//│ JS:
//│ Cls5 = function Cls(...args1) {
//│   return new Cls.class(...args1);
//│ };
//│ Cls5.class = class Cls4 {
//│   constructor(x, y) {
//│     this.x = x;
//│     this.y = y;
//│   }
//│   get f$__checkNotMethod() { runtime.deboundMethod("f", "Cls"); }
//│   f(...args) {
//│     runtime.checkArgs("f", 2, true, args.length);
//│     let z = args[0];
//│     let p = args[1];
//│     return (...args1) => {
//│       runtime.checkArgs("", 2, true, args1.length);
//│       let q = args1[0];
//│       let s = args1[1];
//│       let tmp5, tmp6, tmp7, tmp8;
//│       tmp5 = this.x + this.y;
//│       tmp6 = tmp5 + z;
//│       tmp7 = tmp6 + p;
//│       tmp8 = tmp7 + q;
//│       return tmp8 + s
//│     }
//│   }
//│   toString() { return "Cls(" + runtime.render(this.x) + ", " + runtime.render(this.y) + ")"; }
//│ };
//│ tmp3 = runtime.checkCall(Cls5(1, 2));
//│ tmp4 = tmp3.f(3, 4);
//│ block$res9 = runtime.safeCall(tmp4(5));
//│ undefined
//│ ═══[RUNTIME ERROR] Error: Function expected 2 arguments but got 1


:ssjs
console.log(1)
//│ JS:
//│ selRes = this.console;
//│ if (selRes === undefined) {
//│   throw new this.Error("Access to required field 'console' yielded 'undefined'");
//│ }
//│ block$res10 = runtime.safeCall(selRes.log(1));
//│ undefined
//│ > 1


:re
:ssjs
globalThis.x
//│ JS:
//│ selRes1 = this.x;
//│ discarded = this.x$__checkNotMethod;
//│ if (selRes1 === undefined) {
//│   throw new this.Error("Access to required field 'x' yielded 'undefined'");
//│ }
//│ block$res11 = selRes1;
//│ undefined
//│ ═══[RUNTIME ERROR] Error: Access to required field 'x' yielded 'undefined'

:re
:ssjs
globalThis.x()
//│ JS:
//│ block$res12 = runtime.safeCall(this.x()); undefined
//│ ═══[RUNTIME ERROR] TypeError: this.x is not a function




:re
:ssjs
module M with
  data class A(x) with
    fun f(y) = x + y
if M.A(1).y is
  x and x == 1 then x
  else 0
//│ JS:
//│ (class M {
//│   static {
//│     M1 = M;
//│     this.A = function A(...args1) {
//│       return new A.class(...args1);
//│     };
//│     this.A.class = class A {
//│       constructor(x1) {
//│         this.x = x1;
//│       }
//│       get f$__checkNotMethod() { runtime.deboundMethod("f", "A"); }
//│       f(...args) {
//│         runtime.checkArgs("f", 1, true, args.length);
//│         let y = args[0];
//│         return this.x + y
//│       }
//│       toString() { return "A(" + runtime.render(this.x) + ")"; }
//│     };
//│   }
//│   static toString() { return "M"; }
//│ });
//│ tmp5 = runtime.checkCall(M1.A(1));
//│ selRes2 = tmp5.y;
//│ discarded1 = tmp5.y$__checkNotMethod;
//│ if (selRes2 === undefined) {
//│   throw new this.Error("Access to required field 'y' yielded 'undefined'");
//│ }
//│ scrut = selRes2;
//│ x = scrut;
//│ scrut1 = x == 1;
//│ if (scrut1 === true) {
//│   block$res13 = x;
//│   undefined
//│ } else {
//│   block$res13 = 0;
//│   undefined
//│ }
//│ ═══[RUNTIME ERROR] Error: Access to required field 'y' yielded 'undefined'



:ssjs
:re
M.A(1).y
  console.log()
//│ JS:
//│ selRes3 = this.console;
//│ if (selRes3 === undefined) {
//│   throw new this.Error("Access to required field 'console' yielded 'undefined'");
//│ }
//│ tmp6 = runtime.checkCall(M1.A(1));
//│ selRes4 = tmp6.y;
//│ discarded2 = tmp6.y$__checkNotMethod;
//│ if (selRes4 === undefined) {
//│   throw new this.Error("Access to required field 'y' yielded 'undefined'");
//│ }
//│ block$res14 = runtime.safeCall(selRes3.log(selRes4));
//│ undefined
//│ ═══[RUNTIME ERROR] Error: Access to required field 'y' yielded 'undefined'



:ssjs
:noSanityCheck
M.A(1).y
  console.log()
//│ JS:
//│ tmp7 = M1.A(1); block$res15 = runtime.safeCall(this.console.log(tmp7.y)); undefined
//│ > undefined

:noSanityCheck
:expect false
M.A(2).y > 1
//│ = false

:re
M.A(2).y > 1
//│ ═══[RUNTIME ERROR] Error: Access to required field 'y' yielded 'undefined'

:re
:ssjs
M.A(1).g(0)
//│ JS:
//│ tmp10 = runtime.checkCall(M1.A(1)); block$res18 = runtime.safeCall(tmp10.g(0)); undefined
//│ ═══[RUNTIME ERROR] TypeError: tmp10.g is not a function



:ssjs
M.A(1).f(0)
//│ JS:
//│ tmp11 = runtime.checkCall(M1.A(1)); block$res19 = runtime.safeCall(tmp11.f(0)); undefined
//│ = 1



