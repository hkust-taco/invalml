:js

:global
:sjs


let x
//│ JS (unsanitized):
//│ let x; x = undefined;

x = 1
//│ JS (unsanitized):
//│ x = 1;

x
//│ JS (unsanitized):
//│ x
//│ = 1

// TODO forbid redefining a let
x = 2
//│ JS (unsanitized):
//│ x = 2;

x
//│ JS (unsanitized):
//│ x
//│ = 2


let y = 1
//│ JS (unsanitized):
//│ let y; y = 1;
//│ y = 1

:e
z = 1
//│ ╔══[ERROR] Name not found: z
//│ ║  l.37: 	z = 1
//│ ╙──      	^
//│ JS (unsanitized):
//│ /* error */


fun f() = 1
//│ JS (unsanitized):
//│ let f; f = function f() { return 1 };

f
//│ JS (unsanitized):
//│ f
//│ = [function f]


let f
f(x) = x + 1
//│ JS (unsanitized):
//│ let f1, f2; f2 = function f(x1) { return x1 + 1 }; f1 = f2;
//│ f = [function f]

f(1)
//│ JS (unsanitized):
//│ runtime.safeCall(f1(1))
//│ = 2


let foo
foo = 0
//│ JS (unsanitized):
//│ let foo; foo = 0;
//│ foo = 0

:fixme
let foo
if true
then foo = 0
else foo = 1
//│ ╔══[PARSE ERROR] Expected end of input; found '=' keyword instead
//│ ║  l.76: 	then foo = 0
//│ ╙──      	         ^
//│ JS (unsanitized):
//│ let foo1, scrut;
//│ foo1 = undefined;
//│ scrut = true;
//│ if (scrut === true) {
//│   foo1
//│ } else {
//│   throw new this.Error("match error");
//│ }

let foo
if true
then
  foo = 0
else
  foo = 1
//│ JS (unsanitized):
//│ let foo2, scrut1;
//│ foo2 = undefined;
//│ scrut1 = true;
//│ if (scrut1 === true) {
//│   foo2 = 0;
//│   runtime.Unit
//│ } else {
//│   foo2 = 1;
//│   runtime.Unit
//│ }
//│ foo = 0


fun f() =
  foo = 42
//│ JS (unsanitized):
//│ let f3; f3 = function f() { foo2 = 42; return runtime.Unit };

f()
//│ JS (unsanitized):
//│ f3()

foo
//│ JS (unsanitized):
//│ foo2
//│ = 42


:fixme
fun f() = foo = 0
//│ ╔══[PARSE ERROR] Expected end of input; found '=' keyword instead
//│ ║  l.127: 	fun f() = foo = 0
//│ ╙──       	              ^
//│ JS (unsanitized):
//│ let f4; f4 = function f() { return foo2 };


