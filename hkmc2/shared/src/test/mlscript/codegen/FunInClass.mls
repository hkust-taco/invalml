:js


fun test() =
  data class C(a) with { fun f() = a }
  C(0).f()

test()
//│ = 0


:sjs
fun test(a) =
  data class Inner(b) with
    print(a)
    fun f(c) = [a, b, c]
    fun g(d) =
      fun h(e) = [a, b, d, e]
      h(d)
  Inner(42)
//│ JS (unsanitized):
//│ let test1;
//│ test1 = function test(a) {
//│   let Inner1;
//│   Inner1 = function Inner(b1) {
//│     return new Inner.class(b1);
//│   };
//│   Inner1.class = class Inner {
//│     constructor(b) {
//│       let tmp;
//│       this.b = b;
//│       tmp = Predef.print(a);
//│     }
//│     f(c) {
//│       return [
//│         a,
//│         this.b,
//│         c
//│       ]
//│     } 
//│     g(d) {
//│       let h;
//│       const this$Inner = this;
//│       h = function h(e) {
//│         return [
//│           a,
//│           this$Inner.b,
//│           d,
//│           e
//│         ]
//│       };
//│       return h(d)
//│     }
//│     toString() { return "Inner(" + globalThis.Predef.render(this.b) + ")"; }
//│   };
//│   return Inner1(42)
//│ };

let i = test(100)
//│ > 100
//│ i = Inner(42)

i.f(200)
//│ = [100, 42, 200]

i.g(200)
//│ = [100, 42, 200, 200]


:sjs
fun test(a) =
  data class C1(b) with
    print of [a, b]
  data class C2(b) with
    print of [a, b]
  [C1(1), C2(2)]
//│ JS (unsanitized):
//│ let test2;
//│ test2 = function test(a) {
//│   let C11, C21, tmp1, tmp2;
//│   C11 = function C1(b1) {
//│     return new C1.class(b1);
//│   };
//│   C11.class = class C1 {
//│     constructor(b) {
//│       this.b = b;
//│       Predef.print([
//│         a,
//│         this.b
//│       ])
//│     }
//│     toString() { return "C1(" + globalThis.Predef.render(this.b) + ")"; }
//│   };
//│   C21 = function C2(b1) {
//│     return new C2.class(b1);
//│   };
//│   C21.class = class C2 {
//│     constructor(b) {
//│       this.b = b;
//│       Predef.print([
//│         a,
//│         this.b
//│       ])
//│     }
//│     toString() { return "C2(" + globalThis.Predef.render(this.b) + ")"; }
//│   };
//│   tmp1 = C11(1);
//│   tmp2 = C21(2);
//│   return [
//│     tmp1,
//│     tmp2
//│   ]
//│ };

test(123)
//│ > [123, 1]
//│ > [123, 2]
//│ = [C1(1), C2(2)]


:sjs
data class Foo(a) with
  fun foo() =
    fun bar() = a
    fun baz() = a
    bar()
    baz()
  foo()
Foo(123)
//│ JS (unsanitized):
//│ let Foo1;
//│ Foo1 = function Foo(a1) {
//│   return new Foo.class(a1);
//│ };
//│ Foo1.class = class Foo {
//│   constructor(a) {
//│     this.a = a;
//│     this.foo()
//│   }
//│   foo() {
//│     let bar, baz, tmp1;
//│     const this$Foo = this;
//│     bar = function bar() {
//│       return this$Foo.a
//│     };
//│     baz = function baz() {
//│       return this$Foo.a
//│     };
//│     tmp1 = bar();
//│     return baz()
//│   }
//│   toString() { return "Foo(" + globalThis.Predef.render(this.a) + ")"; }
//│ };
//│ Foo1(123)
//│ = Foo(123)

:sjs
data class Bar(x) with
  fun foo()() =
    fun bar() =
      x
    bar()
  foo()()
Bar(1)
//│ JS (unsanitized):
//│ let Bar1;
//│ Bar1 = function Bar(x1) {
//│   return new Bar.class(x1);
//│ };
//│ Bar1.class = class Bar {
//│   constructor(x) {
//│     let tmp1;
//│     this.x = x;
//│     tmp1 = this.foo();
//│     runtime.safeCall(tmp1())
//│   }
//│   foo() {
//│     return () => {
//│       let bar;
//│       const this$Bar = this;
//│       bar = function bar() {
//│         return this$Bar.x
//│       };
//│       return bar()
//│     }
//│   }
//│   toString() { return "Bar(" + globalThis.Predef.render(this.x) + ")"; }
//│ };
//│ Bar1(1)
//│ = Bar(1)
