:js

fun plus(x, y) = x + y

:traceJS
:e
fun g(z) =
  if
    z < -1 then g(z + 1)
    z == -1 then 42
    z == 0 then plus(0)
    z > 0 then g(z - 1)
//│ ╔══[ERROR] Expected 2 arguments, got 1
//│ ║  l.11: 	    z == 0 then plus(0)
//│ ╙──      	                    ^^^

fun f(x, y)(z) =
  x + y + g(z)

:traceJS
fun h(x) =
  f(1,2)(x)

:traceJS
:re
h(3)
//│ > CALL h(3)
//│ > | CALL g(3)
//│ > | | CALL g(2)
//│ > | | | CALL g(1)
//│ > | | | | CALL g(0)
//│ ═══[RUNTIME ERROR] Error: Function 'plus' expected 2 arguments but got 1

:traceJS
h(-2)
//│ > CALL h(-2)
//│ > | CALL g(-2)
//│ > | | CALL g(-1)
//│ > | | => 42
//│ > | => 42
//│ > => 45
//│ = 45

:traceJS
f(1,1)(-2)
//│ > CALL g(-2)
//│ > | CALL g(-1)
//│ > | => 42
//│ > => 42
//│ = 44

:traceJS
:re
f(1,2)(3)
//│ > CALL g(3)
//│ > | CALL g(2)
//│ > | | CALL g(1)
//│ > | | | CALL g(0)
//│ ═══[RUNTIME ERROR] Error: Function 'plus' expected 2 arguments but got 1

:showRepl
:traceJS
f(1,2)(-3)
//│ REPL> Sending: runtime.TraceLogger.enabled = true; runtime.TraceLogger.resetIndent(0)
//│ REPL> Collected:
//│ >  Unit { class: [class Unit] }
//│ REPL> Sending: block$res9 = undefined
//│ REPL> Collected:
//│ >  undefined
//│ REPL> Sending: let tmp4, tmp5;try { tmp4 = runtime.checkCall(f(1, 2)); tmp5 = - 3; block$res9 = runtime.safeCall(tmp4(tmp5)); undefined } catch (e) { console.log('\u200B' + e.stack + '\u200B'); }
//│ REPL> Collected:
//│ >  CALL g(-3)
//│ >  | CALL g(-2)
//│ >  | | CALL g(-1)
//│ >  | | => 42
//│ >  | => 42
//│ >  => 42
//│ >  undefined
//│ REPL> Parsed:
//│ >  CALL g(-3)
//│ >  | CALL g(-2)
//│ >  | | CALL g(-1)
//│ >  | | => 42
//│ >  | => 42
//│ >  => 42
//│ >  undefined
//│ > CALL g(-3)
//│ > | CALL g(-2)
//│ > | | CALL g(-1)
//│ > | | => 42
//│ > | => 42
//│ > => 42
//│ REPL> Sending: runtime.TraceLogger.enabled = false
//│ REPL> Collected:
//│ >  false
//│ REPL> Sending: try { runtime.checkCall(runtime.printRaw(block$res9)) } catch (e) { console.log('\u200B' + e.stack + '\u200B'); }
//│ REPL> Collected:
//│ >  45
//│ >  Unit { class: [class Unit] }
//│ REPL> Parsed:
//│ >  45
//│ >  Unit { class: [class Unit] }
//│ = 45

:showRepl
f(1,2)(-4)
//│ REPL> Sending: block$res10 = undefined
//│ REPL> Collected:
//│ >  undefined
//│ REPL> Sending: let tmp6, tmp7;try { tmp6 = runtime.checkCall(f(1, 2)); tmp7 = - 4; block$res10 = runtime.safeCall(tmp6(tmp7)); undefined } catch (e) { console.log('\u200B' + e.stack + '\u200B'); }
//│ REPL> Collected:
//│ >  undefined
//│ REPL> Parsed:
//│ >  undefined
//│ REPL> Sending: try { runtime.checkCall(runtime.printRaw(block$res10)) } catch (e) { console.log('\u200B' + e.stack + '\u200B'); }
//│ REPL> Collected:
//│ >  45
//│ >  Unit { class: [class Unit] }
//│ REPL> Parsed:
//│ >  45
//│ >  Unit { class: [class Unit] }
//│ = 45
