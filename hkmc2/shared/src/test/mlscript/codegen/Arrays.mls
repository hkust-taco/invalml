:js


let empty = []
//│ empty = []

:re
empty.0
//│ ═══[RUNTIME ERROR] Error: Access to required field '0' yielded 'undefined'

:sjs
let single = [1]
//│ JS (unsanitized):
//│ let single; single = [ 1 ];
//│ single = [1]

single.0
//│ = 1


:sjs
val single = [1]
//│ JS (unsanitized):
//│ let single1; single1 = [ 1 ];
//│ single = [1]

single.0
//│ = 1

val pair = [1, 2]
//│ pair = [1, 2]

pair.0
//│ = 1

pair.1
//│ = 2

val triple = [1, 2, 3]
//│ triple = [1, 2, 3]

triple.2
//│ = 3

:re
triple.3
//│ ═══[RUNTIME ERROR] Error: Access to required field '3' yielded 'undefined'

:re
triple.4
//│ ═══[RUNTIME ERROR] Error: Access to required field '4' yielded 'undefined'


// * Array hacking (taken from Anto's original port of nofib, which was slightly deranged)

set Array.prototype.toString =
  globalThis.eval("(function() { return '(' + Array.prototype.join.call(this, ',') + ')'; })")

[1, 2, 3]
//│ = [1, 2, 3]

new Array(4)
//│ = [undefined, undefined, undefined, undefined]


// TODO also sanity-check these accesses

:todo
:re
empty.(0)

:todo
:re
empty.[0]

empty.["oops"]


