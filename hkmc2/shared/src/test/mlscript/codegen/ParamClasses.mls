:js

:global
:sjs


data class Foo()
//│ JS (unsanitized):
//│ let Foo1;
//│ Foo1 = function Foo() {
//│   return new Foo.class();
//│ };
//│ Foo1.class = class Foo {
//│   constructor() {}
//│   toString() { return "Foo(" + "" + ")"; }
//│ };

Foo
//│ JS (unsanitized):
//│ Foo1
//│ = [function Foo]

Foo()
//│ JS (unsanitized):
//│ Foo1()
//│ = Foo()

Foo.class
//│ JS (unsanitized):
//│ Foo1.class
//│ = class Foo {   constructor() {}   toString() { return "Foo(" + "" + ")"; } }


data class Foo(a)
//│ JS (unsanitized):
//│ let Foo3;
//│ Foo3 = function Foo(a1) {
//│   return new Foo.class(a1);
//│ };
//│ Foo3.class = class Foo2 {
//│   constructor(a) {
//│     this.a = a;
//│   }
//│   toString() { return "Foo(" + runtime.render(this.a) + ")"; }
//│ };

Foo
//│ JS (unsanitized):
//│ Foo3
//│ = [function Foo]

Foo(1)
//│ JS (unsanitized):
//│ Foo3(1)
//│ = Foo(1)

Foo(1).a
//│ JS (unsanitized):
//│ let tmp; tmp = Foo3(1); tmp.a
//│ = 1

fun foo(y) = Foo(y)
foo(27)
//│ JS (unsanitized):
//│ let foo; foo = function foo(y) { return Foo3(y) }; foo(27)
//│ = Foo(27)


data class Foo(a, b)
//│ JS (unsanitized):
//│ let Foo5;
//│ Foo5 = function Foo(a1, b1) {
//│   return new Foo.class(a1, b1);
//│ };
//│ Foo5.class = class Foo4 {
//│   constructor(a, b) {
//│     this.a = a;
//│     this.b = b;
//│   }
//│   toString() { return "Foo(" + runtime.render(this.a) + ", " + runtime.render(this.b) + ")"; }
//│ };

let foo = Foo
//│ JS (unsanitized):
//│ let foo1; foo1 = Foo5;
//│ foo = [function Foo]

let f = foo(1, 2)
//│ JS (unsanitized):
//│ let f, tmp1; tmp1 = runtime.safeCall(foo1(1, 2)); f = tmp1;
//│ f = Foo(1, 2)

let f = new foo(1, 2)
//│ JS (unsanitized):
//│ let f1, tmp2; tmp2 = new foo1(1, 2); f1 = tmp2;
//│ f = Foo(1, 2)

f.a
//│ JS (unsanitized):
//│ f1.a
//│ = 1

f.b
//│ JS (unsanitized):
//│ f1.b
//│ = 2

let f = Foo(1, 2)
//│ JS (unsanitized):
//│ let f2, tmp3; tmp3 = Foo5(1, 2); f2 = tmp3;
//│ f = Foo(1, 2)

f.a
//│ JS (unsanitized):
//│ f2.a
//│ = 1

f.b
//│ JS (unsanitized):
//│ f2.b
//│ = 2

Foo(print(1), print(2))
//│ JS (unsanitized):
//│ let tmp4, tmp5; tmp4 = Predef.print(1); tmp5 = Predef.print(2); Foo5(tmp4, tmp5)
//│ > 1
//│ > 2
//│ = Foo((), ())


data class Inner(c) with
  fun i1(d) = c + d
  print(c)
//│ JS (unsanitized):
//│ let Inner1;
//│ Inner1 = function Inner(c1) {
//│   return new Inner.class(c1);
//│ };
//│ Inner1.class = class Inner {
//│   constructor(c) {
//│     this.c = c;
//│     Predef.print(this.c)
//│   }
//│   i1(d) {
//│     return this.c + d
//│   }
//│   toString() { return "Inner(" + runtime.render(this.c) + ")"; }
//│ };

let i = new Inner(100)
//│ JS (unsanitized):
//│ let i, tmp6; tmp6 = new Inner1.class(100); i = tmp6;
//│ > 100
//│ i = Inner(100)

i.i1(20)
//│ JS (unsanitized):
//│ runtime.safeCall(i.i1(20))
//│ = 120


// * This is strange, but does not need to be an error
class Foo(x, val y, z, val z, z) with
  let x = 1
  let y += 1
  print("x = " + x)
  print("y = " + y)
  print("this.y = " + this.y)
  print("z = " + z)
  print("this.z = " + this.z)
//│ JS (unsanitized):
//│ let Foo7;
//│ Foo7 = function Foo(x1, y1, z3, z, z1) {
//│   return new Foo.class(x1, y1, z3, z, z1);
//│ };
//│ Foo7.class = class Foo6 {
//│   #x;
//│   #z;
//│   #z1;
//│   #x1;
//│   #y;
//│   constructor(x, y, z, z1, z2) {
//│     let tmp7, tmp8, tmp9, tmp10, tmp11, tmp12, tmp13, tmp14, tmp15, tmp16;
//│     this.#x = x;
//│     this.y = y;
//│     this.#z = z;
//│     this.z = z1;
//│     this.#z1 = z2;
//│     this.#x1 = 1;
//│     tmp7 = this.y + 1;
//│     this.#y = tmp7;
//│     tmp8 = "x = " + this.#x1;
//│     tmp9 = Predef.print(tmp8);
//│     tmp10 = "y = " + this.#y;
//│     tmp11 = Predef.print(tmp10);
//│     tmp12 = "this.y = " + this.y;
//│     tmp13 = Predef.print(tmp12);
//│     tmp14 = "z = " + this.#z1;
//│     tmp15 = Predef.print(tmp14);
//│     tmp16 = "this.z = " + this.z;
//│     Predef.print(tmp16)
//│   }
//│   toString() { return "Foo(" + runtime.render(this.y) + ", " + runtime.render(this.z) + ")"; }
//│ };

Foo(10, 20, 30, 40, 50)
//│ JS (unsanitized):
//│ Foo7(10, 20, 30, 40, 50)
//│ > x = 1
//│ > y = 21
//│ > this.y = 20
//│ > z = 50
//│ > this.z = 40
//│ = Foo(20, 40)


:todo // * This should be an error
:e
class Foo(val z, val z)
//│ JS (unsanitized):
//│ let Foo9;
//│ Foo9 = function Foo(z2, z) {
//│   return new Foo.class(z2, z);
//│ };
//│ Foo9.class = class Foo8 {
//│   constructor(z, z1) {
//│     this.z = z;
//│     this.z = z1;
//│   }
//│   toString() { return "Foo(" + runtime.render(this.z) + ", " + runtime.render(this.z) + ")"; }
//│ };

Foo(1, 2)
//│ JS (unsanitized):
//│ Foo9(1, 2)
//│ = Foo(2, 2)


