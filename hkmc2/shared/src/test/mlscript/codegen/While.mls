:js


:sjs
() => (while true then 0)
//│ JS (unsanitized):
//│ let lambda;
//│ lambda = (undefined, function () {
//│   let scrut, tmp;
//│   tmp1: while (true) {
//│     scrut = true;
//│     if (scrut === true) {
//│       tmp = 0;
//│       continue tmp1;
//│     } else {
//│       throw new globalThis.Error("match error");
//│     }
//│     break;
//│   }
//│   return tmp
//│ });
//│ lambda
//│ = [function]

() =>
  while true then 0
//│ = [function]


let x = true
//│ x = true

:re
while x then set x = false
//│ ═══[RUNTIME ERROR] Error: match error


let x = true
//│ x = true

while x do set x = false


let x = true
let y = false
//│ x = true
//│ y = false

:sjs
while x
  then
    print("Hello World")
    set x = false
  else 42
//│ JS (unsanitized):
//│ let tmp4, tmp5;
//│ tmp6: while (true) {
//│   if (x2 === true) {
//│     tmp4 = Predef.print("Hello World");
//│     x2 = false;
//│     tmp5 = runtime.Unit;
//│     continue tmp6;
//│   } else {
//│     tmp5 = 42;
//│   }
//│   break;
//│ }
//│ tmp5
//│ > Hello World
//│ = 42

while (print("Hello World"), false)
  then 0(0)
  else 1
//│ > Hello World
//│ = 1


let i = 0
//│ i = 0

while i < 3 then set i = i + 1 else i
//│ = 3


let i = 0
while print("checking"); i < 3
  then print("not yet"); set i = i + 1
  else print("ok")
//│ > checking
//│ > not yet
//│ > checking
//│ > not yet
//│ > checking
//│ > not yet
//│ > checking
//│ > ok
//│ i = 3


// * Infinite loop!
:sjs
() =>
while
  let i = 0
  i < 10 do set i += 1
//│ JS (unsanitized):
//│ let lambda2;
//│ lambda2 = (undefined, function () {
//│   let i2, scrut3, tmp19, tmp20;
//│   tmp21: while (true) {
//│     i2 = 0;
//│     scrut3 = i2 < 10;
//│     if (scrut3 === true) {
//│       tmp19 = i2 + 1;
//│       i2 = tmp19;
//│       tmp20 = runtime.Unit;
//│       continue tmp21;
//│     } else {
//│       tmp20 = runtime.Unit;
//│     }
//│     break;
//│   }
//│   return tmp20
//│ });
//│ lambda2
//│ = [function]


let i = 0 in
  while i < 10 then set i += 1
  else i
//│ = 10


let i = 0 in while
  let _ = print(i)
  i < 3 do set i += 1
//│ > 0
//│ > 1
//│ > 2
//│ > 3

let i = 0 in while
  do print(i)
  i < 3 do set i += 1
//│ > 0
//│ > 1
//│ > 2
//│ > 3


// * Note that the semantics of UCS-while is quite subtle.
// * Currently, we only treat the *top-level* `else` as terminating the loop;
// * indeed, other `else` branches are currently indistinguishable from `then` branches
// * in normalized UCS form.

// * Consider:

:ucs normalized
if x
  and
    y then 0
    else 1 // this one will not terminate the loop, if we're in a `while`
  else 42
//│ Normalized:
//│ >  if
//│ >    x is true and
//│ >      y is true then 0
//│ >      else 1
//│ >    else 42
//│ = 42

:ucs normalized
if x
  and
    y then 0
    _ then 1
  else 42
//│ Normalized:
//│ >  if
//│ >    x is true and
//│ >      y is true then 0
//│ >      else 1
//│ >    else 42
//│ = 42


// TODO use
// import "../../mlscript-compile/Stack.mls"

data class Cons(hd, tl)

:sjs
fun f(ls) =
  while ls is
    Cons(h, tl) then
      set ls = tl
      print(h)
  else print("Done!")
//│ JS (unsanitized):
//│ let f;
//│ f = function f(ls) {
//│   let param0, param1, h, tl, tmp28;
//│   tmp29: while (true) {
//│     if (ls instanceof Cons1.class) {
//│       param0 = ls.hd;
//│       param1 = ls.tl;
//│       h = param0;
//│       tl = param1;
//│       ls = tl;
//│       tmp28 = Predef.print(h);
//│       continue tmp29;
//│     } else {
//│       tmp28 = Predef.print("Done!");
//│     }
//│     break;
//│   }
//│   return tmp28
//│ };

f(0)
//│ > Done!

f(Cons(1, 0))
//│ > 1
//│ > Done!

f(Cons(1, Cons(2, Cons(3, 0))))
//│ > 1
//│ > 2
//│ > 3
//│ > Done!

fun f(ls) =
  while
    do print(ls)
    ls is Cons(h, tl) do set ls = tl

f(Cons(1, Cons(2, Cons(3, 0))))
//│ > Cons(1, Cons(2, Cons(3, 0)))
//│ > Cons(2, Cons(3, 0))
//│ > Cons(3, 0)
//│ > 0

while false do
  class A
  new A


// ——— FIXME: ———


() => while true then 0
//│ = [function]

:fixme
while print("Hello World"); false
  then 0(0)
  else 1
//│ ╔══[PARSE ERROR] Unexpected 'then' keyword here
//│ ║  l.259: 	  then 0(0)
//│ ╙──       	  ^^^^
//│ ═══[ERROR] Unrecognized term split (false literal).
//│ > Hello World
//│ ═══[RUNTIME ERROR] Error: match error

:fixme
while { print("Hello World"), false }
  then 0(0)
  else 1
//│ ╔══[ERROR] Unexpected infix use of keyword 'then' here
//│ ║  l.269: 	while { print("Hello World"), false }
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.270: 	  then 0(0)
//│ ╙──       	^^^^^^^^^^^
//│ ═══[ERROR] Illegal position for 'else' modifier.

:fixme
while
    print("Hello World")
    false
  then 0(0)
  else 1
//│ ╔══[ERROR] Unexpected infix use of keyword 'then' here
//│ ║  l.281: 	    print("Hello World")
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^
//│ ║  l.282: 	    false
//│ ║         	^^^^^^^^^
//│ ║  l.283: 	  then 0(0)
//│ ╙──       	^^^^^^^^^^^
//│ ═══[ERROR] Illegal position for 'else' modifier.


