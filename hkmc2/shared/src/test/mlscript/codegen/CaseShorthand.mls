:js


case x then x
//│ = [function]

:sjs
case { x then x }
//│ JS (unsanitized):
//│ let lambda1; lambda1 = (undefined, function (caseScrut) { let x; x = caseScrut; return x }); lambda1
//│ = [function]

:sjs
x => if x is
  0 then true
//│ JS (unsanitized):
//│ let lambda2;
//│ lambda2 = (undefined, function (x) {
//│   if (x === 0) {
//│     return true
//│   } else {
//│     throw new globalThis.Error("match error");
//│   }
//│ });
//│ lambda2
//│ = [function]

:sjs
case 0 then true
//│ JS (unsanitized):
//│ let lambda3;
//│ lambda3 = (undefined, function (caseScrut) {
//│   if (caseScrut === 0) {
//│     return true
//│   } else {
//│     throw new globalThis.Error("match error");
//│   }
//│ });
//│ lambda3
//│ = [function]

(case x then x) of 1
//│ = 1

1 |> case x then x
//│ = 1

1 |> id of case x then x
//│ = 1

[1] |> case [x] then x
//│ = 1

1 |> (2 |> case x then case y then [x, y]) |> case [a, b] then [b, a]
//│ = [1, 2]

:todo
case [x] then x, [] then 0
//│ /!!!\ Uncaught error: scala.MatchError: InfixApp(Tup(List()),keyword 'then',IntLit(0)) (of class hkmc2.syntax.Tree$InfixApp)

:sjs
case
  0 then true
  _ then false
//│ JS (unsanitized):
//│ let lambda10;
//│ lambda10 = (undefined, function (caseScrut) {
//│   if (caseScrut === 0) {
//│     return true
//│   } else {
//│     return false
//│   }
//│ });
//│ lambda10
//│ = [function]

data class Some(value)
module None

:sjs
val isDefined = case
  Some then true
  None then false
//│ JS (unsanitized):
//│ let isDefined, tmp5, lambda11;
//│ lambda11 = (undefined, function (caseScrut) {
//│   if (caseScrut instanceof Some1.class) {
//│     return true
//│   } else if (caseScrut instanceof None1) {
//│     return false
//│   } else {
//│     throw new globalThis.Error("match error");
//│   }
//│ });
//│ tmp5 = lambda11;
//│ isDefined = tmp5;
//│ isDefined = [function]

