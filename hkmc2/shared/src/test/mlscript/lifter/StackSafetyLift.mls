:js
:lift

// sanity check
:expect 5050
fun sum(n) =
  if n == 0 then 0
  else
    n + sum(n - 1)
sum(100)
//│ = 5050

// preserve tail calls
// MUST see "return hi1(tmp)" in the output
:stackSafe 5
:effectHandlers
:expect 0
:sjs
fun hi(n) =
  if n == 0 then 0
  else hi(n - 1)
hi(0)
//│ JS (unsanitized):
//│ let hi, res, Cont$func$hi$StackSafetyLift$_mls_L19_4_47$1, handleBlock$, Cont$handleBlock$stackHandler$1, StackDelay$1, lambda, Cont$func$hi$StackSafetyLift$_mls_L19_4_47$$ctor, Cont$func$hi$StackSafetyLift$_mls_L19_4_47$$, Cont$handleBlock$stackHandler$$ctor, Cont$handleBlock$stackHandler$$, lambda$;
//│ Cont$func$hi$StackSafetyLift$_mls_L19_4_47$$ = function Cont$func$hi$StackSafetyLift$_mls_L19_4_47$$(n$0, scrut$1, tmp$2, stackDelayRes$3, pc) {
//│   let tmp;
//│   tmp = new Cont$func$hi$StackSafetyLift$_mls_L19_4_47$1.class(pc);
//│   return tmp(n$0, scrut$1, tmp$2, stackDelayRes$3)
//│ };
//│ Cont$func$hi$StackSafetyLift$_mls_L19_4_47$$ctor = function Cont$func$hi$StackSafetyLift$_mls_L19_4_47$$ctor(n$0, scrut$1, tmp$2, stackDelayRes$3) {
//│   return (pc) => {
//│     let tmp;
//│     tmp = new Cont$func$hi$StackSafetyLift$_mls_L19_4_47$1.class(pc);
//│     return tmp(n$0, scrut$1, tmp$2, stackDelayRes$3)
//│   }
//│ };
//│ Cont$func$hi$StackSafetyLift$_mls_L19_4_47$1 = function Cont$func$hi$StackSafetyLift$_mls_L19_4_47$(pc1) {
//│   return (n$01, scrut$11, tmp$21, stackDelayRes$31) => {
//│     return new Cont$func$hi$StackSafetyLift$_mls_L19_4_47$.class(pc1)(n$01, scrut$11, tmp$21, stackDelayRes$31);
//│   }
//│ };
//│ Cont$func$hi$StackSafetyLift$_mls_L19_4_47$1.class = class Cont$func$hi$StackSafetyLift$_mls_L19_4_47$ extends runtime.FunctionContFrame.class {
//│   constructor(pc) {
//│     return (n$0, scrut$1, tmp$2, stackDelayRes$3) => {
//│       let tmp;
//│       tmp = super(null);
//│       this.n$0 = n$0;
//│       this.scrut$1 = scrut$1;
//│       this.tmp$2 = tmp$2;
//│       this.stackDelayRes$3 = stackDelayRes$3;
//│       this.pc = pc;
//│       return this;
//│     }
//│   }
//│   resume(value$) {
//│     if (this.pc === 0) {
//│       this.stackDelayRes$3 = value$;
//│     }
//│     contLoop: while (true) {
//│       if (this.pc === 0) {
//│         this.scrut$1 = this.n$0 == 0;
//│         if (this.scrut$1 === true) {
//│           return 0
//│         } else {
//│           this.tmp$2 = this.n$0 - 1;
//│           this.pc = 2;
//│           continue contLoop;
//│         }
//│         this.pc = 1;
//│         continue contLoop;
//│       } else if (this.pc === 1) {
//│         break contLoop;
//│       } else if (this.pc === 2) {
//│         runtime.stackDepth = runtime.stackDepth + 1;
//│         return hi(this.tmp$2)
//│       }
//│       break;
//│     }
//│   }
//│   toString() { return "Cont$func$hi$StackSafetyLift$_mls_L19_4_47$(" + globalThis.Predef.render(this.pc) + ")"; }
//│ };
//│ hi = function hi(n) {
//│   let scrut, tmp, stackDelayRes;
//│   stackDelayRes = runtime.checkDepth();
//│   if (stackDelayRes instanceof runtime.EffectSig.class) {
//│     stackDelayRes.contTrace.last.next = Cont$func$hi$StackSafetyLift$_mls_L19_4_47$$(n, scrut, tmp, stackDelayRes, 0);
//│     stackDelayRes.contTrace.last = stackDelayRes.contTrace.last.next;
//│     return stackDelayRes
//│   }
//│   scrut = n == 0;
//│   if (scrut === true) {
//│     return 0
//│   } else {
//│     tmp = n - 1;
//│     runtime.stackDepth = runtime.stackDepth + 1;
//│     return hi(tmp)
//│   }
//│ };
//│ lambda$ = function lambda$(StackDelay$$instance, resume) {
//│   runtime.stackOffset = runtime.stackDepth;
//│   return resume()
//│ };
//│ lambda = (undefined, function (StackDelay$$instance) {
//│   return (resume) => {
//│     return lambda$(StackDelay$$instance, resume)
//│   }
//│ });
//│ StackDelay$1 = class StackDelay$ extends runtime.StackDelay {
//│   constructor() {
//│     let tmp;
//│     tmp = super();
//│   }
//│   perform() {
//│     let lambda$this;
//│     lambda$this = runtime.safeCall(lambda(this));
//│     return runtime.mkEffect(this, lambda$this)
//│   }
//│   toString() { return "StackDelay$"; }
//│ };
//│ Cont$handleBlock$stackHandler$$ = function Cont$handleBlock$stackHandler$$(res$0, pc) {
//│   let tmp;
//│   tmp = new Cont$handleBlock$stackHandler$1.class(pc);
//│   return tmp(res$0)
//│ };
//│ Cont$handleBlock$stackHandler$$ctor = function Cont$handleBlock$stackHandler$$ctor(res$0) {
//│   return (pc) => {
//│     let tmp;
//│     tmp = new Cont$handleBlock$stackHandler$1.class(pc);
//│     return tmp(res$0)
//│   }
//│ };
//│ Cont$handleBlock$stackHandler$1 = function Cont$handleBlock$stackHandler$(pc1) {
//│   return (res$01) => {
//│     return new Cont$handleBlock$stackHandler$.class(pc1)(res$01);
//│   }
//│ };
//│ Cont$handleBlock$stackHandler$1.class = class Cont$handleBlock$stackHandler$ extends runtime.FunctionContFrame.class {
//│   constructor(pc) {
//│     return (res$0) => {
//│       let tmp;
//│       tmp = super(null);
//│       this.res$0 = res$0;
//│       this.pc = pc;
//│       return this;
//│     }
//│   }
//│   resume(value$) {
//│     if (this.pc === 3) {
//│       this.res$0 = value$;
//│     }
//│     contLoop: while (true) {
//│       if (this.pc === 3) {
//│         return this.res$0
//│       }
//│       break;
//│     }
//│   }
//│   toString() { return "Cont$handleBlock$stackHandler$(" + globalThis.Predef.render(this.pc) + ")"; }
//│ };
//│ handleBlock$ = function handleBlock$() {
//│   let stackHandler, res1;
//│   stackHandler = new StackDelay$1();
//│   runtime.stackLimit = 5;
//│   runtime.stackOffset = 0;
//│   runtime.stackDepth = 1;
//│   runtime.stackHandler = stackHandler;
//│   res1 = hi(0);
//│   if (res1 instanceof runtime.EffectSig.class) {
//│     res1.contTrace.last.next = Cont$handleBlock$stackHandler$$(res1, 3);
//│     return runtime.handleBlockImpl(res1, stackHandler)
//│   }
//│   return res1
//│ };
//│ res = handleBlock$();
//│ if (res instanceof runtime.EffectSig.class) {
//│   throw new this.Error("Unhandled effects");
//│ }
//│ runtime.stackDepth = 0;
//│ runtime.stackHandler = null;
//│ res
//│ = 0

:sjs
:stackSafe 1000
:effectHandlers
:expect 50005000
fun sum(n) =
  if n == 0 then 0
  else
    n + sum(n - 1)
sum(10000)
//│ JS (unsanitized):
//│ let sum1, res1, Cont$func$sum$StackSafetyLift$_mls_L187_4_57$1, handleBlock$1, Cont$handleBlock$stackHandler$3, StackDelay$3, lambda1, Cont$func$sum$StackSafetyLift$_mls_L187_4_57$$ctor, Cont$func$sum$StackSafetyLift$_mls_L187_4_57$$, Cont$handleBlock$stackHandler$$ctor1, Cont$handleBlock$stackHandler$$1, lambda$1;
//│ Cont$func$sum$StackSafetyLift$_mls_L187_4_57$$ = function Cont$func$sum$StackSafetyLift$_mls_L187_4_57$$(n$0, scrut$1, tmp$2, tmp$3, curDepth$4, stackDelayRes$5, pc) {
//│   let tmp;
//│   tmp = new Cont$func$sum$StackSafetyLift$_mls_L187_4_57$1.class(pc);
//│   return tmp(n$0, scrut$1, tmp$2, tmp$3, curDepth$4, stackDelayRes$5)
//│ };
//│ Cont$func$sum$StackSafetyLift$_mls_L187_4_57$$ctor = function Cont$func$sum$StackSafetyLift$_mls_L187_4_57$$ctor(n$0, scrut$1, tmp$2, tmp$3, curDepth$4, stackDelayRes$5) {
//│   return (pc) => {
//│     let tmp;
//│     tmp = new Cont$func$sum$StackSafetyLift$_mls_L187_4_57$1.class(pc);
//│     return tmp(n$0, scrut$1, tmp$2, tmp$3, curDepth$4, stackDelayRes$5)
//│   }
//│ };
//│ Cont$func$sum$StackSafetyLift$_mls_L187_4_57$1 = function Cont$func$sum$StackSafetyLift$_mls_L187_4_57$(pc1) {
//│   return (n$01, scrut$11, tmp$21, tmp$31, curDepth$41, stackDelayRes$51) => {
//│     return new Cont$func$sum$StackSafetyLift$_mls_L187_4_57$.class(pc1)(n$01, scrut$11, tmp$21, tmp$31, curDepth$41, stackDelayRes$51);
//│   }
//│ };
//│ Cont$func$sum$StackSafetyLift$_mls_L187_4_57$1.class = class Cont$func$sum$StackSafetyLift$_mls_L187_4_57$ extends runtime.FunctionContFrame.class {
//│   constructor(pc) {
//│     return (n$0, scrut$1, tmp$2, tmp$3, curDepth$4, stackDelayRes$5) => {
//│       let tmp;
//│       tmp = super(null);
//│       this.n$0 = n$0;
//│       this.scrut$1 = scrut$1;
//│       this.tmp$2 = tmp$2;
//│       this.tmp$3 = tmp$3;
//│       this.curDepth$4 = curDepth$4;
//│       this.stackDelayRes$5 = stackDelayRes$5;
//│       this.pc = pc;
//│       return this;
//│     }
//│   }
//│   resume(value$) {
//│     if (this.pc === 0) {
//│       this.stackDelayRes$5 = value$;
//│     } else if (this.pc === 1) {
//│       this.tmp$3 = value$;
//│     }
//│     contLoop: while (true) {
//│       if (this.pc === 0) {
//│         this.scrut$1 = this.n$0 == 0;
//│         if (this.scrut$1 === true) {
//│           return 0
//│         } else {
//│           this.tmp$2 = this.n$0 - 1;
//│           this.pc = 3;
//│           continue contLoop;
//│         }
//│         this.pc = 2;
//│         continue contLoop;
//│       } else if (this.pc === 2) {
//│         break contLoop;
//│       } else if (this.pc === 3) {
//│         runtime.stackDepth = runtime.stackDepth + 1;
//│         this.tmp$3 = sum1(this.tmp$2);
//│         if (this.tmp$3 instanceof runtime.EffectSig.class) {
//│           this.pc = 1;
//│           this.tmp$3.contTrace.last.next = this;
//│           this.tmp$3.contTrace.last = this;
//│           return this.tmp$3
//│         }
//│         this.pc = 1;
//│         continue contLoop;
//│       } else if (this.pc === 1) {
//│         this.tmp$3 = runtime.resetDepth(this.tmp$3, this.curDepth$4);
//│         return this.n$0 + this.tmp$3
//│       }
//│       break;
//│     }
//│   }
//│   toString() { return "Cont$func$sum$StackSafetyLift$_mls_L187_4_57$(" + globalThis.Predef.render(this.pc) + ")"; }
//│ };
//│ sum1 = function sum(n) {
//│   let scrut, tmp, tmp1, curDepth, stackDelayRes;
//│   curDepth = runtime.stackDepth;
//│   stackDelayRes = runtime.checkDepth();
//│   if (stackDelayRes instanceof runtime.EffectSig.class) {
//│     stackDelayRes.contTrace.last.next = Cont$func$sum$StackSafetyLift$_mls_L187_4_57$$(n, scrut, tmp, tmp1, curDepth, stackDelayRes, 0);
//│     stackDelayRes.contTrace.last = stackDelayRes.contTrace.last.next;
//│     return stackDelayRes
//│   }
//│   scrut = n == 0;
//│   if (scrut === true) {
//│     return 0
//│   } else {
//│     tmp = n - 1;
//│     runtime.stackDepth = runtime.stackDepth + 1;
//│     tmp1 = sum1(tmp);
//│     if (tmp1 instanceof runtime.EffectSig.class) {
//│       tmp1.contTrace.last.next = Cont$func$sum$StackSafetyLift$_mls_L187_4_57$$(n, scrut, tmp, tmp1, curDepth, stackDelayRes, 1);
//│       tmp1.contTrace.last = tmp1.contTrace.last.next;
//│       return tmp1
//│     }
//│     tmp1 = runtime.resetDepth(tmp1, curDepth);
//│     return n + tmp1
//│   }
//│ };
//│ lambda$1 = function lambda$(StackDelay$$instance, resume) {
//│   runtime.stackOffset = runtime.stackDepth;
//│   return resume()
//│ };
//│ lambda1 = (undefined, function (StackDelay$$instance) {
//│   return (resume) => {
//│     return lambda$1(StackDelay$$instance, resume)
//│   }
//│ });
//│ StackDelay$3 = class StackDelay$2 extends runtime.StackDelay {
//│   constructor() {
//│     let tmp;
//│     tmp = super();
//│   }
//│   perform() {
//│     let lambda$this;
//│     lambda$this = runtime.safeCall(lambda1(this));
//│     return runtime.mkEffect(this, lambda$this)
//│   }
//│   toString() { return "StackDelay$"; }
//│ };
//│ Cont$handleBlock$stackHandler$$1 = function Cont$handleBlock$stackHandler$$(res$0, pc) {
//│   let tmp;
//│   tmp = new Cont$handleBlock$stackHandler$3.class(pc);
//│   return tmp(res$0)
//│ };
//│ Cont$handleBlock$stackHandler$$ctor1 = function Cont$handleBlock$stackHandler$$ctor(res$0) {
//│   return (pc) => {
//│     let tmp;
//│     tmp = new Cont$handleBlock$stackHandler$3.class(pc);
//│     return tmp(res$0)
//│   }
//│ };
//│ Cont$handleBlock$stackHandler$3 = function Cont$handleBlock$stackHandler$(pc1) {
//│   return (res$01) => {
//│     return new Cont$handleBlock$stackHandler$.class(pc1)(res$01);
//│   }
//│ };
//│ Cont$handleBlock$stackHandler$3.class = class Cont$handleBlock$stackHandler$2 extends runtime.FunctionContFrame.class {
//│   constructor(pc) {
//│     return (res$0) => {
//│       let tmp;
//│       tmp = super(null);
//│       this.res$0 = res$0;
//│       this.pc = pc;
//│       return this;
//│     }
//│   }
//│   resume(value$) {
//│     if (this.pc === 4) {
//│       this.res$0 = value$;
//│     }
//│     contLoop: while (true) {
//│       if (this.pc === 4) {
//│         return this.res$0
//│       }
//│       break;
//│     }
//│   }
//│   toString() { return "Cont$handleBlock$stackHandler$(" + globalThis.Predef.render(this.pc) + ")"; }
//│ };
//│ handleBlock$1 = function handleBlock$() {
//│   let stackHandler, res2;
//│   stackHandler = new StackDelay$3();
//│   runtime.stackLimit = 1000;
//│   runtime.stackOffset = 0;
//│   runtime.stackDepth = 1;
//│   runtime.stackHandler = stackHandler;
//│   res2 = sum1(10000);
//│   if (res2 instanceof runtime.EffectSig.class) {
//│     res2.contTrace.last.next = Cont$handleBlock$stackHandler$$1(res2, 4);
//│     return runtime.handleBlockImpl(res2, stackHandler)
//│   }
//│   return res2
//│ };
//│ res1 = handleBlock$1();
//│ if (res1 instanceof runtime.EffectSig.class) {
//│   throw new this.Error("Unhandled effects");
//│ }
//│ runtime.stackDepth = 0;
//│ runtime.stackHandler = null;
//│ res1
//│ = 50005000

// stack-overflows without :stackSafe
:re
fun sum(n) =
  if n == 0 then 0
  else
    n + sum(n - 1)
sum(10000)
//│ ═══[RUNTIME ERROR] RangeError: Maximum call stack size exceeded

:effectHandlers
:stackSafe 100
mut val ctr = 0
fun dummy(x) = x
fun foo(f) = 
  if ctr > 10000 then 0
  else 
    set ctr += 1
    dummy(f(f))
foo(foo)
//│ = 0
//│ ctr = 10001

:stackSafe 1000
:effectHandlers
:expect 50005000
val foo =
  val f = n =>
    if n <= 0 then 0
    else n + f(n-1)
  f(10000)
foo
//│ = 50005000
//│ foo = 50005000

:re
fun foo() =
  let f = ()
  set f = n =>
    if n <= 0 then 0
    else n + f(n-1)
  f(10000)
foo()
//│ ═══[RUNTIME ERROR] RangeError: Maximum call stack size exceeded

abstract class Eff with
  fun perform(a): ()

// functions and lambdas inside handlers
:effectHandlers
:stackSafe 100
:expect 50005000
fun foo(h) = h.perform
handle h = Eff with
  fun perform(resume) =
    let f = ()
    set f = n =>
      if n <= 0 then 0
      else n + f(n-1)
    resume(f(10000))
foo(h)
//│ = 50005000

// function call and defn inside handler
:effectHandlers
:stackSafe 100
:expect 50005000
handle h = Eff with
  fun perform(resume) =
    let f = ()
    set f = n =>
      if n <= 0 then 0
      else n + f(n-1)
    resume(f(10000))
in
  fun foo(h) = h.perform
  foo(h)
//│ = 50005000

:re
:effectHandlers
fun foo(h) = h.perform(2)
handle h = Eff with
  fun perform(a)(resume) =
    let f = ()
    set f = n =>
      if n <= 0 then 0
      else n + f(n-1)
    resume(f(10000))
foo(h)
//│ ═══[RUNTIME ERROR] RangeError: Maximum call stack size exceeded

:effectHandlers
:stackSafe
:sjs
fun max(a, b) = if a < b then b else a
//│ JS (unsanitized):
//│ let max;
//│ max = function max(a, b) {
//│   let scrut;
//│   scrut = a < b;
//│   if (scrut === true) {
//│     return b
//│   } else {
//│     return a
//│   }
//│ };


:sjs
:stackSafe 42
fun hi(n) = n
hi(0)
//│ /!!!\ Option ':stackSafe' requires ':effectHandlers' to be set
//│ JS (unsanitized):
//│ let hi1; hi1 = function hi(n) { return n }; hi1(0)
//│ = 0

:stackSafe 42
hi(0)
//│ /!!!\ Option ':stackSafe' requires ':effectHandlers' to be set
//│ = 0


:stackSafe 1000
:effectHandlers
:expect 100010000
fun sum(n) =
  if n == 0 then 0
  else
    n + sum(n - 1)
fun bad() = sum(10000) + sum(10000)
bad()
//│ = 100010000

