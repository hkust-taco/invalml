:invalml


(x => x + 1) as [A extends Int] -> A -> Int
//│ Type: (Int) ->{⊥} Int


(x => x) as [A restricts Int] -> A -> A
//│ Type: ['A] -> ('A) ->{⊥} 'A
//│ Where:
//│   Int <: 'A


(x => x - 1) as [A extends Int restricts Int] -> A -> A
//│ Type: ['A] -> ('A) ->{⊥} 'A
//│ Where:
//│   Int <: 'A
//│   'A <: Int

fun iid: [A extends Int] -> A -> A
fun iid(x) = x

iid
//│ Type: ['A] -> ('A) ->{⊥} 'A
//│ Where:
//│   'A <: Int

:e
iid("42")
//│ ╔══[ERROR] Type error in string literal with expected type 'A
//│ ║  l.29: 	iid("42")
//│ ║        	    ^^^^
//│ ╟── because: cannot constrain  Str  <:  'A
//│ ╙── because: cannot constrain  Str  <:  Int
//│ Type: Str


iid(42)
//│ Type: Int

class Foo[A]

fun foo: [A extends Foo[in Nothing out Any] restricts Foo[in Num]] -> A -> A
foo
//│ Type: ['A] -> ('A) ->{⊥} 'A
//│ Where:
//│   Foo[in Num] <: 'A
//│   'A <: Foo[?]

fun bar: Foo[in Num out Int]

foo(bar)
//│ Type: Foo[in Num out Int] ∨ Foo[in Num]

:e
fun badfoo: [A extends Str restricts Int] -> A -> A
//│ ╔══[ERROR] Type error in block
//│ ║  l.56: 	fun badfoo: [A extends Str restricts Int] -> A -> A
//│ ║        	                                             ^^^^^^
//│ ╙── because: cannot constrain  Int  <:  Str


fun baz: [A extends B, B extends A] -> A -> B
baz
//│ Type: (⊤) ->{⊥} ⊤

fun bazbaz: [A extends Int] -> A -> [B extends A] -> B
bazbaz
//│ Type: (Int) ->{⊥} ⊥

fun foofun: [A extends Int -> Int restricts Any -> Int] -> A -> Int -> Int
foofun
//│ Type: (Int -> Int) ->{⊥} (Int) ->{⊥} Int

foofun(x => x + 1)(42)
//│ Type: Int

fun bazbaz: [A extends Int] -> A -> ([B extends A -> A restricts A -> A] -> B) -> A
bazbaz
//│ Type: ['A] -> ('A) ->{⊥} ('A -> 'A) ->{⊥} 'A
//│ Where:
//│   'A <: Int

bazbaz(42)(x => x + 1)
//│ Type: Int

fun cc: [A extends B -> B restricts B -> B, B extends A -> A restricts A -> A] -> A -> B -> Bool
cc
//│ Type: ['A, 'B] -> ('A) ->{⊥} ('B) ->{⊥} Bool
//│ Where:
//│   'A -> 'A <: 'B
//│   'B <: 'A -> 'A
//│   'B -> 'B <: 'A
//│   'A <: 'B -> 'B

fun w: Any -> Nothing

cc(w)(w)
//│ Type: Bool

fun h: [C] -> ([A extends Int] -> A -> ([B extends A -> A restricts A -> A] -> B) -> A) -> C -> Int

:e
bazbaz as [A extends Int] -> A -> ([B extends A -> A restricts A -> A] -> B) -> A
//│ ╔══[ERROR] Cannot type non-function term Ref(member:bazbaz) as (A) ->{⊥} ([outer, 'B] -> 'B) ->{⊥} A
//│ ║  l.104: 	bazbaz as [A extends Int] -> A -> ([B extends A -> A restricts A -> A] -> B) -> A
//│ ╙──       	^^^^^^
//│ Type: ['A] -> ('A) ->{⊥} ('A -> 'A) ->{⊥} 'A
//│ Where:
//│   'A <: Int


(x => f => bazbaz(x)(f)) as [A extends Int] -> A -> ([B extends A -> A restricts A -> A] -> B) -> A
//│ Type: ['A] -> ('A) ->{⊥} ('A -> 'A) ->{⊥} 'A
//│ Where:
//│   'A <: Int


h(x => f => bazbaz(x)(f))(42)
//│ Type: Int

